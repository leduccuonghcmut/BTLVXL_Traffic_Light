
VXL-BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c04  08005c04  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005c04  08005c04  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c04  08005c04  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08005c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200000c8  08005cd4  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08005cd4  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192e6  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003749  00000000  00000000  000393d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0003cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0003dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac21  00000000  00000000  0003ed08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fb7  00000000  00000000  00059929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e76f  00000000  00000000  000718e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010004f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b94  00000000  00000000  001000a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a5c 	.word	0x08005a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08005a5c 	.word	0x08005a5c

0800014c <getKeyInput>:
int button_counter[NUM_BUT];
int counter[NUM_BUT] = {100,100,100};
int button_flag[NUM_BUT];


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUT; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e068      	b.n	800022a <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 8000158:	4a38      	ldr	r2, [pc, #224]	; (800023c <getKeyInput+0xf0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4937      	ldr	r1, [pc, #220]	; (8000240 <getKeyInput+0xf4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000168:	4a36      	ldr	r2, [pc, #216]	; (8000244 <getKeyInput+0xf8>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4932      	ldr	r1, [pc, #200]	; (800023c <getKeyInput+0xf0>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = isReadfrom(i);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f000 f88d 	bl	8000298 <isReadfrom>
 800017e:	4602      	mov	r2, r0
 8000180:	4930      	ldr	r1, [pc, #192]	; (8000244 <getKeyInput+0xf8>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 8000188:	4a2d      	ldr	r2, [pc, #180]	; (8000240 <getKeyInput+0xf4>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	492a      	ldr	r1, [pc, #168]	; (800023c <getKeyInput+0xf0>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000198:	429a      	cmp	r2, r3
 800019a:	d143      	bne.n	8000224 <getKeyInput+0xd8>
 800019c:	4a27      	ldr	r2, [pc, #156]	; (800023c <getKeyInput+0xf0>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4927      	ldr	r1, [pc, #156]	; (8000244 <getKeyInput+0xf8>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d139      	bne.n	8000224 <getKeyInput+0xd8>
			if (KeyReg3[i] != KeyReg2[i]){
 80001b0:	4a25      	ldr	r2, [pc, #148]	; (8000248 <getKeyInput+0xfc>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4922      	ldr	r1, [pc, #136]	; (8000244 <getKeyInput+0xf8>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d01b      	beq.n	80001fc <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 80001c4:	4a1f      	ldr	r2, [pc, #124]	; (8000244 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	491e      	ldr	r1, [pc, #120]	; (8000248 <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED){
 80001d4:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <getKeyInput+0xf8>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d121      	bne.n	8000224 <getKeyInput+0xd8>
					button_counter[i] = counter[i];
 80001e0:	4a1a      	ldr	r2, [pc, #104]	; (800024c <getKeyInput+0x100>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	4919      	ldr	r1, [pc, #100]	; (8000250 <getKeyInput+0x104>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					button_flag[i] = 1;
 80001f0:	4a18      	ldr	r2, [pc, #96]	; (8000254 <getKeyInput+0x108>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2101      	movs	r1, #1
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fa:	e013      	b.n	8000224 <getKeyInput+0xd8>
				}
			}
			else {
				button_counter[i]--;
 80001fc:	4a14      	ldr	r2, [pc, #80]	; (8000250 <getKeyInput+0x104>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000204:	1e5a      	subs	r2, r3, #1
 8000206:	4912      	ldr	r1, [pc, #72]	; (8000250 <getKeyInput+0x104>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (button_counter[i] == 0) {
 800020e:	4a10      	ldr	r2, [pc, #64]	; (8000250 <getKeyInput+0x104>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d104      	bne.n	8000224 <getKeyInput+0xd8>
					KeyReg3[i] = NORMAL;
 800021a:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <getKeyInput+0xfc>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2101      	movs	r1, #1
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUT; i++) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b02      	cmp	r3, #2
 800022e:	dd93      	ble.n	8000158 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000000c 	.word	0x2000000c
 8000240:	20000000 	.word	0x20000000
 8000244:	20000018 	.word	0x20000018
 8000248:	20000024 	.word	0x20000024
 800024c:	20000030 	.word	0x20000030
 8000250:	20000118 	.word	0x20000118
 8000254:	20000124 	.word	0x20000124

08000258 <isKeyPressed>:
int isKeyPressed(int index) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (index <NUM_BUT) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b02      	cmp	r3, #2
 8000264:	dc0e      	bgt.n	8000284 <isKeyPressed+0x2c>
		if (button_flag[index] == 1){
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <isKeyPressed+0x3c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d106      	bne.n	8000280 <isKeyPressed+0x28>
			button_flag[index] = 0;
 8000272:	4a08      	ldr	r2, [pc, #32]	; (8000294 <isKeyPressed+0x3c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2100      	movs	r1, #0
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e003      	b.n	8000288 <isKeyPressed+0x30>
		}
		return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	e001      	b.n	8000288 <isKeyPressed+0x30>
	}
	return -1;
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000124 	.word	0x20000124

08000298 <isReadfrom>:



int isReadfrom (int index) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (index < NUM_BUT) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	dc20      	bgt.n	80002e8 <isReadfrom+0x50>
		switch (index){
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d016      	beq.n	80002da <isReadfrom+0x42>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	dc1c      	bgt.n	80002ec <isReadfrom+0x54>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <isReadfrom+0x28>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d006      	beq.n	80002cc <isReadfrom+0x34>
				break;
			case 2:
				return HAL_GPIO_ReadPin(D7_btn2_GPIO_Port, D7_btn2_Pin);
				break;
			default:
				break;
 80002be:	e015      	b.n	80002ec <isReadfrom+0x54>
				return HAL_GPIO_ReadPin(D5_btn0_GPIO_Port, D5_btn0_Pin);
 80002c0:	2110      	movs	r1, #16
 80002c2:	480e      	ldr	r0, [pc, #56]	; (80002fc <isReadfrom+0x64>)
 80002c4:	f002 fbee 	bl	8002aa4 <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	e012      	b.n	80002f2 <isReadfrom+0x5a>
				return HAL_GPIO_ReadPin(D6_btn1_GPIO_Port, D6_btn1_Pin);
 80002cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d0:	480a      	ldr	r0, [pc, #40]	; (80002fc <isReadfrom+0x64>)
 80002d2:	f002 fbe7 	bl	8002aa4 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	e00b      	b.n	80002f2 <isReadfrom+0x5a>
				return HAL_GPIO_ReadPin(D7_btn2_GPIO_Port, D7_btn2_Pin);
 80002da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002de:	4808      	ldr	r0, [pc, #32]	; (8000300 <isReadfrom+0x68>)
 80002e0:	f002 fbe0 	bl	8002aa4 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	e004      	b.n	80002f2 <isReadfrom+0x5a>
		}
	}
 80002e8:	bf00      	nop
 80002ea:	e000      	b.n	80002ee <isReadfrom+0x56>
				break;
 80002ec:	bf00      	nop
	return -1;
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	40010800 	.word	0x40010800

08000304 <command_read_fsm>:
 *      Author: My Laptop
 */

#include "command_read.h"
#include <main.h>
void command_read_fsm(){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	switch(status_command){
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <command_read_fsm+0x94>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d002      	beq.n	8000316 <command_read_fsm+0x12>
 8000310:	2b01      	cmp	r3, #1
 8000312:	d00b      	beq.n	800032c <command_read_fsm+0x28>
				if (command_index == MAX_BUFFER_SIZE) command_index = 0;
			}
		}
		break;
	default:
		break;
 8000314:	e03b      	b.n	800038e <command_read_fsm+0x8a>
		if (cursor == '!') {
 8000316:	4b21      	ldr	r3, [pc, #132]	; (800039c <command_read_fsm+0x98>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b21      	cmp	r3, #33	; 0x21
 800031c:	d134      	bne.n	8000388 <command_read_fsm+0x84>
			command_index = 0;
 800031e:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <command_read_fsm+0x9c>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
			status_command = WAIT_END;
 8000324:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <command_read_fsm+0x94>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
		break;
 800032a:	e02d      	b.n	8000388 <command_read_fsm+0x84>
		if (cursor == '#') {
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <command_read_fsm+0x98>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b23      	cmp	r3, #35	; 0x23
 8000332:	d10c      	bne.n	800034e <command_read_fsm+0x4a>
			command[command_index] = '\0';
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <command_read_fsm+0x9c>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <command_read_fsm+0xa0>)
 800033c:	2100      	movs	r1, #0
 800033e:	5499      	strb	r1, [r3, r2]
			command_flag = 1;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <command_read_fsm+0xa4>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
			status_command = WAIT_INIT;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <command_read_fsm+0x94>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
		break;
 800034c:	e01e      	b.n	800038c <command_read_fsm+0x88>
			if (cursor == '!') {
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <command_read_fsm+0x98>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b21      	cmp	r3, #33	; 0x21
 8000354:	d103      	bne.n	800035e <command_read_fsm+0x5a>
				command_index = 0;
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <command_read_fsm+0x9c>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
		break;
 800035c:	e016      	b.n	800038c <command_read_fsm+0x88>
				command[command_index] = cursor;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <command_read_fsm+0x9c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	461a      	mov	r2, r3
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <command_read_fsm+0x98>)
 8000366:	7819      	ldrb	r1, [r3, #0]
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <command_read_fsm+0xa0>)
 800036a:	5499      	strb	r1, [r3, r2]
				command_index++;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <command_read_fsm+0x9c>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <command_read_fsm+0x9c>)
 8000376:	701a      	strb	r2, [r3, #0]
				if (command_index == MAX_BUFFER_SIZE) command_index = 0;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <command_read_fsm+0x9c>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b1e      	cmp	r3, #30
 800037e:	d105      	bne.n	800038c <command_read_fsm+0x88>
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <command_read_fsm+0x9c>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
		break;
 8000386:	e001      	b.n	800038c <command_read_fsm+0x88>
		break;
 8000388:	bf00      	nop
 800038a:	e000      	b.n	800038e <command_read_fsm+0x8a>
		break;
 800038c:	bf00      	nop
	}
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	200000f0 	.word	0x200000f0
 800039c:	200000f4 	.word	0x200000f4
 80003a0:	200000f6 	.word	0x200000f6
 80003a4:	20000148 	.word	0x20000148
 80003a8:	200000f7 	.word	0x200000f7

080003ac <setCount>:

int count0, count1;
int led_buffer[4];
int second = 0;

void setCount (int index, int value) {
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	if (index == 0) count0 = value;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d102      	bne.n	80003c2 <setCount+0x16>
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <setCount+0x2c>)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	6013      	str	r3, [r2, #0]
	if (index == 1)	count1 = value;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d102      	bne.n	80003ce <setCount+0x22>
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <setCount+0x30>)
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	6013      	str	r3, [r2, #0]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	20000144 	.word	0x20000144
 80003dc:	20000140 	.word	0x20000140

080003e0 <minusCount>:
void minusCount(){
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	count0--;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <minusCount+0x20>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	4a05      	ldr	r2, [pc, #20]	; (8000400 <minusCount+0x20>)
 80003ec:	6013      	str	r3, [r2, #0]
	count1--;
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <minusCount+0x24>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <minusCount+0x24>)
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	20000144 	.word	0x20000144
 8000404:	20000140 	.word	0x20000140

08000408 <getCount>:
int getCount (int index) {
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	if (index ==0) return count0;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d102      	bne.n	800041c <getCount+0x14>
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <getCount+0x30>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	e007      	b.n	800042c <getCount+0x24>
	if (index ==1) return count1;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d102      	bne.n	8000428 <getCount+0x20>
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <getCount+0x34>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	e001      	b.n	800042c <getCount+0x24>
	return -1;
 8000428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000144 	.word	0x20000144
 800043c:	20000140 	.word	0x20000140

08000440 <fsm_INIT>:

void fsm_INIT() {
 8000440:	b598      	push	{r3, r4, r7, lr}
 8000442:	af00      	add	r7, sp, #0
	status = MODE0;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <fsm_INIT+0x68>)
 8000446:	2201      	movs	r2, #1
 8000448:	601a      	str	r2, [r3, #0]
	set_off0_off1();
 800044a:	f001 fdbb 	bl	8001fc4 <set_off0_off1>
	count0 = RedTime();
 800044e:	f000 fbef 	bl	8000c30 <RedTime>
 8000452:	4603      	mov	r3, r0
 8000454:	4a15      	ldr	r2, [pc, #84]	; (80004ac <fsm_INIT+0x6c>)
 8000456:	6013      	str	r3, [r2, #0]
	count1 = GreenTime();
 8000458:	f000 fbe0 	bl	8000c1c <GreenTime>
 800045c:	4603      	mov	r3, r0
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <fsm_INIT+0x70>)
 8000460:	6013      	str	r3, [r2, #0]
	setBuffer(RedTime(), GreenTime());
 8000462:	f000 fbe5 	bl	8000c30 <RedTime>
 8000466:	4604      	mov	r4, r0
 8000468:	f000 fbd8 	bl	8000c1c <GreenTime>
 800046c:	4603      	mov	r3, r0
 800046e:	4619      	mov	r1, r3
 8000470:	4620      	mov	r0, r4
 8000472:	f000 fff5 	bl	8001460 <setBuffer>
	if (second < 1) {
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <fsm_INIT+0x74>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dc0a      	bgt.n	8000494 <fsm_INIT+0x54>
		SCH_Add_Task(fsm_INIT, 250, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	21fa      	movs	r1, #250	; 0xfa
 8000482:	480d      	ldr	r0, [pc, #52]	; (80004b8 <fsm_INIT+0x78>)
 8000484:	f001 fba6 	bl	8001bd4 <SCH_Add_Task>
		second++;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <fsm_INIT+0x74>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <fsm_INIT+0x74>)
 8000490:	6013      	str	r3, [r2, #0]
	}
	else {
		second = 0;
		SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
	}
}
 8000492:	e007      	b.n	80004a4 <fsm_INIT+0x64>
		second = 0;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <fsm_INIT+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
		SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	21fa      	movs	r1, #250	; 0xfa
 800049e:	4807      	ldr	r0, [pc, #28]	; (80004bc <fsm_INIT+0x7c>)
 80004a0:	f001 fb98 	bl	8001bd4 <SCH_Add_Task>
}
 80004a4:	bf00      	nop
 80004a6:	bd98      	pop	{r3, r4, r7, pc}
 80004a8:	200000ec 	.word	0x200000ec
 80004ac:	20000144 	.word	0x20000144
 80004b0:	20000140 	.word	0x20000140
 80004b4:	200000e4 	.word	0x200000e4
 80004b8:	08000441 	.word	0x08000441
 80004bc:	080004c1 	.word	0x080004c1

080004c0 <fsm_AUTO_RED_GREEN>:

void fsm_AUTO_RED_GREEN () {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	if (status == MAN_RED_GREEN) lcd_clear_display();
 80004c6:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <fsm_AUTO_RED_GREEN+0x114>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b06      	cmp	r3, #6
 80004cc:	d101      	bne.n	80004d2 <fsm_AUTO_RED_GREEN+0x12>
 80004ce:	f000 ff92 	bl	80013f6 <lcd_clear_display>
	set_red0_green1();
 80004d2:	f001 fd93 	bl	8001ffc <set_red0_green1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 80004d6:	2101      	movs	r1, #1
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 ff96 	bl	800140a <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 80004de:	2100      	movs	r1, #0
 80004e0:	2001      	movs	r0, #1
 80004e2:	f000 ff92 	bl	800140a <lcd_goto_XY>
	if (count0 < 10) {
 80004e6:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <fsm_AUTO_RED_GREEN+0x118>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b09      	cmp	r3, #9
 80004ec:	dc07      	bgt.n	80004fe <fsm_AUTO_RED_GREEN+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <fsm_AUTO_RED_GREEN+0x118>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	463b      	mov	r3, r7
 80004f4:	4939      	ldr	r1, [pc, #228]	; (80005dc <fsm_AUTO_RED_GREEN+0x11c>)
 80004f6:	4618      	mov	r0, r3
 80004f8:	f004 ff2c 	bl	8005354 <siprintf>
 80004fc:	e006      	b.n	800050c <fsm_AUTO_RED_GREEN+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 80004fe:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <fsm_AUTO_RED_GREEN+0x118>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	463b      	mov	r3, r7
 8000504:	4936      	ldr	r1, [pc, #216]	; (80005e0 <fsm_AUTO_RED_GREEN+0x120>)
 8000506:	4618      	mov	r0, r3
 8000508:	f004 ff24 	bl	8005354 <siprintf>
	}
	lcd_send_string(buffer);
 800050c:	463b      	mov	r3, r7
 800050e:	4618      	mov	r0, r3
 8000510:	f000 ff5c 	bl	80013cc <lcd_send_string>
	if (count0 < 10) {
 8000514:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <fsm_AUTO_RED_GREEN+0x118>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b09      	cmp	r3, #9
 800051a:	dc07      	bgt.n	800052c <fsm_AUTO_RED_GREEN+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <fsm_AUTO_RED_GREEN+0x124>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	463b      	mov	r3, r7
 8000522:	4931      	ldr	r1, [pc, #196]	; (80005e8 <fsm_AUTO_RED_GREEN+0x128>)
 8000524:	4618      	mov	r0, r3
 8000526:	f004 ff15 	bl	8005354 <siprintf>
 800052a:	e006      	b.n	800053a <fsm_AUTO_RED_GREEN+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 800052c:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <fsm_AUTO_RED_GREEN+0x124>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	463b      	mov	r3, r7
 8000532:	492e      	ldr	r1, [pc, #184]	; (80005ec <fsm_AUTO_RED_GREEN+0x12c>)
 8000534:	4618      	mov	r0, r3
 8000536:	f004 ff0d 	bl	8005354 <siprintf>
	}
	lcd_goto_XY(0, 1);
 800053a:	2101      	movs	r1, #1
 800053c:	2000      	movs	r0, #0
 800053e:	f000 ff64 	bl	800140a <lcd_goto_XY>
	lcd_send_string(buffer);
 8000542:	463b      	mov	r3, r7
 8000544:	4618      	mov	r0, r3
 8000546:	f000 ff41 	bl	80013cc <lcd_send_string>

	status = AUTO_RED_GREEN;
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <fsm_AUTO_RED_GREEN+0x114>)
 800054c:	220a      	movs	r2, #10
 800054e:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <fsm_AUTO_RED_GREEN+0x130>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b02      	cmp	r3, #2
 8000556:	dc0a      	bgt.n	800056e <fsm_AUTO_RED_GREEN+0xae>
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	21fa      	movs	r1, #250	; 0xfa
 800055c:	4825      	ldr	r0, [pc, #148]	; (80005f4 <fsm_AUTO_RED_GREEN+0x134>)
 800055e:	f001 fb39 	bl	8001bd4 <SCH_Add_Task>
			second++;
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <fsm_AUTO_RED_GREEN+0x130>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <fsm_AUTO_RED_GREEN+0x130>)
 800056a:	6013      	str	r3, [r2, #0]
		}
		else {
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
		}
	}
}
 800056c:	e02d      	b.n	80005ca <fsm_AUTO_RED_GREEN+0x10a>
		second = 0;
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <fsm_AUTO_RED_GREEN+0x130>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
		minusCount();
 8000574:	f7ff ff34 	bl	80003e0 <minusCount>
		setBuffer(count0, count1);
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <fsm_AUTO_RED_GREEN+0x118>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <fsm_AUTO_RED_GREEN+0x124>)
 800057e:	6812      	ldr	r2, [r2, #0]
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 ff6c 	bl	8001460 <setBuffer>
		if (count1 == 0) {
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <fsm_AUTO_RED_GREEN+0x124>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d117      	bne.n	80005c0 <fsm_AUTO_RED_GREEN+0x100>
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	21fa      	movs	r1, #250	; 0xfa
 8000594:	4818      	ldr	r0, [pc, #96]	; (80005f8 <fsm_AUTO_RED_GREEN+0x138>)
 8000596:	f001 fb1d 	bl	8001bd4 <SCH_Add_Task>
			count1 = AmberTime();
 800059a:	f000 fb53 	bl	8000c44 <AmberTime>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <fsm_AUTO_RED_GREEN+0x124>)
 80005a2:	6013      	str	r3, [r2, #0]
			count0 = AmberTime();
 80005a4:	f000 fb4e 	bl	8000c44 <AmberTime>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <fsm_AUTO_RED_GREEN+0x118>)
 80005ac:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <fsm_AUTO_RED_GREEN+0x118>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <fsm_AUTO_RED_GREEN+0x124>)
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff51 	bl	8001460 <setBuffer>
}
 80005be:	e004      	b.n	80005ca <fsm_AUTO_RED_GREEN+0x10a>
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	21fa      	movs	r1, #250	; 0xfa
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <fsm_AUTO_RED_GREEN+0x134>)
 80005c6:	f001 fb05 	bl	8001bd4 <SCH_Add_Task>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000ec 	.word	0x200000ec
 80005d8:	20000144 	.word	0x20000144
 80005dc:	08005a74 	.word	0x08005a74
 80005e0:	08005a84 	.word	0x08005a84
 80005e4:	20000140 	.word	0x20000140
 80005e8:	08005a94 	.word	0x08005a94
 80005ec:	08005aa4 	.word	0x08005aa4
 80005f0:	200000e4 	.word	0x200000e4
 80005f4:	080004c1 	.word	0x080004c1
 80005f8:	080005fd 	.word	0x080005fd

080005fc <fsm_AUTO_RED_YELLOW>:

void fsm_AUTO_RED_YELLOW () {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	if (status == MAN_RED_YELLOW) lcd_clear_display();
 8000602:	4b43      	ldr	r3, [pc, #268]	; (8000710 <fsm_AUTO_RED_YELLOW+0x114>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b07      	cmp	r3, #7
 8000608:	d101      	bne.n	800060e <fsm_AUTO_RED_YELLOW+0x12>
 800060a:	f000 fef4 	bl	80013f6 <lcd_clear_display>
	set_red0_amber1();
 800060e:	f001 fd11 	bl	8002034 <set_red0_amber1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 8000612:	2101      	movs	r1, #1
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fef8 	bl	800140a <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 800061a:	2100      	movs	r1, #0
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fef4 	bl	800140a <lcd_goto_XY>
	if (count0 < 10) {
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <fsm_AUTO_RED_YELLOW+0x118>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b09      	cmp	r3, #9
 8000628:	dc07      	bgt.n	800063a <fsm_AUTO_RED_YELLOW+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 800062a:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <fsm_AUTO_RED_YELLOW+0x118>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	463b      	mov	r3, r7
 8000630:	4939      	ldr	r1, [pc, #228]	; (8000718 <fsm_AUTO_RED_YELLOW+0x11c>)
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fe8e 	bl	8005354 <siprintf>
 8000638:	e006      	b.n	8000648 <fsm_AUTO_RED_YELLOW+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 800063a:	4b36      	ldr	r3, [pc, #216]	; (8000714 <fsm_AUTO_RED_YELLOW+0x118>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	463b      	mov	r3, r7
 8000640:	4936      	ldr	r1, [pc, #216]	; (800071c <fsm_AUTO_RED_YELLOW+0x120>)
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fe86 	bl	8005354 <siprintf>
	}
	lcd_send_string(buffer);
 8000648:	463b      	mov	r3, r7
 800064a:	4618      	mov	r0, r3
 800064c:	f000 febe 	bl	80013cc <lcd_send_string>
	if (count0 < 10) {
 8000650:	4b30      	ldr	r3, [pc, #192]	; (8000714 <fsm_AUTO_RED_YELLOW+0x118>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b09      	cmp	r3, #9
 8000656:	dc07      	bgt.n	8000668 <fsm_AUTO_RED_YELLOW+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 8000658:	4b31      	ldr	r3, [pc, #196]	; (8000720 <fsm_AUTO_RED_YELLOW+0x124>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	463b      	mov	r3, r7
 800065e:	4931      	ldr	r1, [pc, #196]	; (8000724 <fsm_AUTO_RED_YELLOW+0x128>)
 8000660:	4618      	mov	r0, r3
 8000662:	f004 fe77 	bl	8005354 <siprintf>
 8000666:	e006      	b.n	8000676 <fsm_AUTO_RED_YELLOW+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <fsm_AUTO_RED_YELLOW+0x124>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	463b      	mov	r3, r7
 800066e:	492e      	ldr	r1, [pc, #184]	; (8000728 <fsm_AUTO_RED_YELLOW+0x12c>)
 8000670:	4618      	mov	r0, r3
 8000672:	f004 fe6f 	bl	8005354 <siprintf>
	}
	lcd_goto_XY(0, 1);
 8000676:	2101      	movs	r1, #1
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fec6 	bl	800140a <lcd_goto_XY>
	lcd_send_string(buffer);
 800067e:	463b      	mov	r3, r7
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fea3 	bl	80013cc <lcd_send_string>

	status = AUTO_RED_YELLOW;
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <fsm_AUTO_RED_YELLOW+0x114>)
 8000688:	220b      	movs	r2, #11
 800068a:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <fsm_AUTO_RED_YELLOW+0x130>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b02      	cmp	r3, #2
 8000692:	dc0a      	bgt.n	80006aa <fsm_AUTO_RED_YELLOW+0xae>
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	21fa      	movs	r1, #250	; 0xfa
 8000698:	4825      	ldr	r0, [pc, #148]	; (8000730 <fsm_AUTO_RED_YELLOW+0x134>)
 800069a:	f001 fa9b 	bl	8001bd4 <SCH_Add_Task>
			second++;
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <fsm_AUTO_RED_YELLOW+0x130>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <fsm_AUTO_RED_YELLOW+0x130>)
 80006a6:	6013      	str	r3, [r2, #0]
		else {
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);

		}
	}
}
 80006a8:	e02d      	b.n	8000706 <fsm_AUTO_RED_YELLOW+0x10a>
		second = 0;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <fsm_AUTO_RED_YELLOW+0x130>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
		minusCount();
 80006b0:	f7ff fe96 	bl	80003e0 <minusCount>
		setBuffer(count0, count1);
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <fsm_AUTO_RED_YELLOW+0x118>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a19      	ldr	r2, [pc, #100]	; (8000720 <fsm_AUTO_RED_YELLOW+0x124>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fece 	bl	8001460 <setBuffer>
		if (count1 == 0) {
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <fsm_AUTO_RED_YELLOW+0x124>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d117      	bne.n	80006fc <fsm_AUTO_RED_YELLOW+0x100>
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	21fa      	movs	r1, #250	; 0xfa
 80006d0:	4818      	ldr	r0, [pc, #96]	; (8000734 <fsm_AUTO_RED_YELLOW+0x138>)
 80006d2:	f001 fa7f 	bl	8001bd4 <SCH_Add_Task>
			count0 = GreenTime();
 80006d6:	f000 faa1 	bl	8000c1c <GreenTime>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <fsm_AUTO_RED_YELLOW+0x118>)
 80006de:	6013      	str	r3, [r2, #0]
			count1 = RedTime();
 80006e0:	f000 faa6 	bl	8000c30 <RedTime>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <fsm_AUTO_RED_YELLOW+0x124>)
 80006e8:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <fsm_AUTO_RED_YELLOW+0x118>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <fsm_AUTO_RED_YELLOW+0x124>)
 80006f0:	6812      	ldr	r2, [r2, #0]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 feb3 	bl	8001460 <setBuffer>
}
 80006fa:	e004      	b.n	8000706 <fsm_AUTO_RED_YELLOW+0x10a>
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	21fa      	movs	r1, #250	; 0xfa
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <fsm_AUTO_RED_YELLOW+0x134>)
 8000702:	f001 fa67 	bl	8001bd4 <SCH_Add_Task>
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000ec 	.word	0x200000ec
 8000714:	20000144 	.word	0x20000144
 8000718:	08005a74 	.word	0x08005a74
 800071c:	08005a84 	.word	0x08005a84
 8000720:	20000140 	.word	0x20000140
 8000724:	08005a94 	.word	0x08005a94
 8000728:	08005aa4 	.word	0x08005aa4
 800072c:	200000e4 	.word	0x200000e4
 8000730:	080005fd 	.word	0x080005fd
 8000734:	08000739 	.word	0x08000739

08000738 <fsm_AUTO_GREEN_RED>:

void fsm_AUTO_GREEN_RED () {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
	if (status == MAN_GREEN_RED) lcd_clear_display();
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <fsm_AUTO_GREEN_RED+0x114>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b08      	cmp	r3, #8
 8000744:	d101      	bne.n	800074a <fsm_AUTO_GREEN_RED+0x12>
 8000746:	f000 fe56 	bl	80013f6 <lcd_clear_display>
	set_green0_red1();
 800074a:	f001 fc8f 	bl	800206c <set_green0_red1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 800074e:	2101      	movs	r1, #1
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fe5a 	bl	800140a <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 8000756:	2100      	movs	r1, #0
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fe56 	bl	800140a <lcd_goto_XY>
	if (count0 < 10) {
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b09      	cmp	r3, #9
 8000764:	dc07      	bgt.n	8000776 <fsm_AUTO_GREEN_RED+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 8000766:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	463b      	mov	r3, r7
 800076c:	4939      	ldr	r1, [pc, #228]	; (8000854 <fsm_AUTO_GREEN_RED+0x11c>)
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fdf0 	bl	8005354 <siprintf>
 8000774:	e006      	b.n	8000784 <fsm_AUTO_GREEN_RED+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 8000776:	4b36      	ldr	r3, [pc, #216]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	463b      	mov	r3, r7
 800077c:	4936      	ldr	r1, [pc, #216]	; (8000858 <fsm_AUTO_GREEN_RED+0x120>)
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fde8 	bl	8005354 <siprintf>
	}
	lcd_send_string(buffer);
 8000784:	463b      	mov	r3, r7
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe20 	bl	80013cc <lcd_send_string>
	if (count0 < 10) {
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b09      	cmp	r3, #9
 8000792:	dc07      	bgt.n	80007a4 <fsm_AUTO_GREEN_RED+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <fsm_AUTO_GREEN_RED+0x124>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	463b      	mov	r3, r7
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <fsm_AUTO_GREEN_RED+0x128>)
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fdd9 	bl	8005354 <siprintf>
 80007a2:	e006      	b.n	80007b2 <fsm_AUTO_GREEN_RED+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <fsm_AUTO_GREEN_RED+0x124>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	463b      	mov	r3, r7
 80007aa:	492e      	ldr	r1, [pc, #184]	; (8000864 <fsm_AUTO_GREEN_RED+0x12c>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fdd1 	bl	8005354 <siprintf>
	}
	lcd_goto_XY(0, 1);
 80007b2:	2101      	movs	r1, #1
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fe28 	bl	800140a <lcd_goto_XY>
	lcd_send_string(buffer);
 80007ba:	463b      	mov	r3, r7
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fe05 	bl	80013cc <lcd_send_string>

	status = AUTO_GREEN_RED;
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <fsm_AUTO_GREEN_RED+0x114>)
 80007c4:	220c      	movs	r2, #12
 80007c6:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <fsm_AUTO_GREEN_RED+0x130>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	dc0a      	bgt.n	80007e6 <fsm_AUTO_GREEN_RED+0xae>
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	21fa      	movs	r1, #250	; 0xfa
 80007d4:	4825      	ldr	r0, [pc, #148]	; (800086c <fsm_AUTO_GREEN_RED+0x134>)
 80007d6:	f001 f9fd 	bl	8001bd4 <SCH_Add_Task>
			second++;
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <fsm_AUTO_GREEN_RED+0x130>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <fsm_AUTO_GREEN_RED+0x130>)
 80007e2:	6013      	str	r3, [r2, #0]
		}
		else {
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
		}
	}
}
 80007e4:	e02d      	b.n	8000842 <fsm_AUTO_GREEN_RED+0x10a>
		second = 0;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <fsm_AUTO_GREEN_RED+0x130>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
		minusCount();
 80007ec:	f7ff fdf8 	bl	80003e0 <minusCount>
		setBuffer(count0, count1);
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <fsm_AUTO_GREEN_RED+0x124>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fe30 	bl	8001460 <setBuffer>
		if (count0 == 0) {
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d117      	bne.n	8000838 <fsm_AUTO_GREEN_RED+0x100>
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	21fa      	movs	r1, #250	; 0xfa
 800080c:	4818      	ldr	r0, [pc, #96]	; (8000870 <fsm_AUTO_GREEN_RED+0x138>)
 800080e:	f001 f9e1 	bl	8001bd4 <SCH_Add_Task>
			count0 = AmberTime();
 8000812:	f000 fa17 	bl	8000c44 <AmberTime>
 8000816:	4603      	mov	r3, r0
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 800081a:	6013      	str	r3, [r2, #0]
			count1 = AmberTime();
 800081c:	f000 fa12 	bl	8000c44 <AmberTime>
 8000820:	4603      	mov	r3, r0
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <fsm_AUTO_GREEN_RED+0x124>)
 8000824:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <fsm_AUTO_GREEN_RED+0x118>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <fsm_AUTO_GREEN_RED+0x124>)
 800082c:	6812      	ldr	r2, [r2, #0]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fe15 	bl	8001460 <setBuffer>
}
 8000836:	e004      	b.n	8000842 <fsm_AUTO_GREEN_RED+0x10a>
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	21fa      	movs	r1, #250	; 0xfa
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <fsm_AUTO_GREEN_RED+0x134>)
 800083e:	f001 f9c9 	bl	8001bd4 <SCH_Add_Task>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000ec 	.word	0x200000ec
 8000850:	20000144 	.word	0x20000144
 8000854:	08005a74 	.word	0x08005a74
 8000858:	08005a84 	.word	0x08005a84
 800085c:	20000140 	.word	0x20000140
 8000860:	08005a94 	.word	0x08005a94
 8000864:	08005aa4 	.word	0x08005aa4
 8000868:	200000e4 	.word	0x200000e4
 800086c:	08000739 	.word	0x08000739
 8000870:	08000875 	.word	0x08000875

08000874 <fsm_AUTO_YELLOW_RED>:

void fsm_AUTO_YELLOW_RED () {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
	if (status == MAN_YELLOW_RED) lcd_clear_display();
 800087a:	4b43      	ldr	r3, [pc, #268]	; (8000988 <fsm_AUTO_YELLOW_RED+0x114>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b09      	cmp	r3, #9
 8000880:	d101      	bne.n	8000886 <fsm_AUTO_YELLOW_RED+0x12>
 8000882:	f000 fdb8 	bl	80013f6 <lcd_clear_display>
	set_amber0_red1();
 8000886:	f001 fc0d 	bl	80020a4 <set_amber0_red1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 800088a:	2101      	movs	r1, #1
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fdbc 	bl	800140a <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 8000892:	2100      	movs	r1, #0
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fdb8 	bl	800140a <lcd_goto_XY>
	if (count0 < 10) {
 800089a:	4b3c      	ldr	r3, [pc, #240]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b09      	cmp	r3, #9
 80008a0:	dc07      	bgt.n	80008b2 <fsm_AUTO_YELLOW_RED+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 80008a2:	4b3a      	ldr	r3, [pc, #232]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	463b      	mov	r3, r7
 80008a8:	4939      	ldr	r1, [pc, #228]	; (8000990 <fsm_AUTO_YELLOW_RED+0x11c>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fd52 	bl	8005354 <siprintf>
 80008b0:	e006      	b.n	80008c0 <fsm_AUTO_YELLOW_RED+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 80008b2:	4b36      	ldr	r3, [pc, #216]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	463b      	mov	r3, r7
 80008b8:	4936      	ldr	r1, [pc, #216]	; (8000994 <fsm_AUTO_YELLOW_RED+0x120>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fd4a 	bl	8005354 <siprintf>
	}
	lcd_send_string(buffer);
 80008c0:	463b      	mov	r3, r7
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fd82 	bl	80013cc <lcd_send_string>
	if (count0 < 10) {
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	dc07      	bgt.n	80008e0 <fsm_AUTO_YELLOW_RED+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <fsm_AUTO_YELLOW_RED+0x124>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	463b      	mov	r3, r7
 80008d6:	4931      	ldr	r1, [pc, #196]	; (800099c <fsm_AUTO_YELLOW_RED+0x128>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fd3b 	bl	8005354 <siprintf>
 80008de:	e006      	b.n	80008ee <fsm_AUTO_YELLOW_RED+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <fsm_AUTO_YELLOW_RED+0x124>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	463b      	mov	r3, r7
 80008e6:	492e      	ldr	r1, [pc, #184]	; (80009a0 <fsm_AUTO_YELLOW_RED+0x12c>)
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fd33 	bl	8005354 <siprintf>
	}
	lcd_goto_XY(0, 1);
 80008ee:	2101      	movs	r1, #1
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 fd8a 	bl	800140a <lcd_goto_XY>
	lcd_send_string(buffer);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fd67 	bl	80013cc <lcd_send_string>

	status = AUTO_YELLOW_RED;
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <fsm_AUTO_YELLOW_RED+0x114>)
 8000900:	220d      	movs	r2, #13
 8000902:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <fsm_AUTO_YELLOW_RED+0x130>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	dc0a      	bgt.n	8000922 <fsm_AUTO_YELLOW_RED+0xae>
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	21fa      	movs	r1, #250	; 0xfa
 8000910:	4825      	ldr	r0, [pc, #148]	; (80009a8 <fsm_AUTO_YELLOW_RED+0x134>)
 8000912:	f001 f95f 	bl	8001bd4 <SCH_Add_Task>
			second++;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <fsm_AUTO_YELLOW_RED+0x130>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <fsm_AUTO_YELLOW_RED+0x130>)
 800091e:	6013      	str	r3, [r2, #0]
		}
		else {
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
		}
	}
}
 8000920:	e02d      	b.n	800097e <fsm_AUTO_YELLOW_RED+0x10a>
		second = 0;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <fsm_AUTO_YELLOW_RED+0x130>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
		minusCount();
 8000928:	f7ff fd5a 	bl	80003e0 <minusCount>
		setBuffer(count0, count1);
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <fsm_AUTO_YELLOW_RED+0x124>)
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fd92 	bl	8001460 <setBuffer>
		if (count0 == 0) {
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d117      	bne.n	8000974 <fsm_AUTO_YELLOW_RED+0x100>
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	21fa      	movs	r1, #250	; 0xfa
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <fsm_AUTO_YELLOW_RED+0x138>)
 800094a:	f001 f943 	bl	8001bd4 <SCH_Add_Task>
			count0 = RedTime();
 800094e:	f000 f96f 	bl	8000c30 <RedTime>
 8000952:	4603      	mov	r3, r0
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 8000956:	6013      	str	r3, [r2, #0]
			count1 = GreenTime();
 8000958:	f000 f960 	bl	8000c1c <GreenTime>
 800095c:	4603      	mov	r3, r0
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <fsm_AUTO_YELLOW_RED+0x124>)
 8000960:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <fsm_AUTO_YELLOW_RED+0x118>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <fsm_AUTO_YELLOW_RED+0x124>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fd77 	bl	8001460 <setBuffer>
}
 8000972:	e004      	b.n	800097e <fsm_AUTO_YELLOW_RED+0x10a>
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	21fa      	movs	r1, #250	; 0xfa
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <fsm_AUTO_YELLOW_RED+0x134>)
 800097a:	f001 f92b 	bl	8001bd4 <SCH_Add_Task>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000ec 	.word	0x200000ec
 800098c:	20000144 	.word	0x20000144
 8000990:	08005a74 	.word	0x08005a74
 8000994:	08005a84 	.word	0x08005a84
 8000998:	20000140 	.word	0x20000140
 800099c:	08005a94 	.word	0x08005a94
 80009a0:	08005aa4 	.word	0x08005aa4
 80009a4:	200000e4 	.word	0x200000e4
 80009a8:	08000875 	.word	0x08000875
 80009ac:	080004c1 	.word	0x080004c1

080009b0 <fms_MAN_RED_GREEN>:

#include "fsm_manual.h"
#include "fsm_automatic.h"
#include "fsm_settings.h"

void fms_MAN_RED_GREEN(){
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 80009b6:	2101      	movs	r1, #1
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fd26 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 80009be:	463b      	mov	r3, r7
 80009c0:	491f      	ldr	r1, [pc, #124]	; (8000a40 <fms_MAN_RED_GREEN+0x90>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f004 fcc6 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 80009c8:	463b      	mov	r3, r7
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fcfe 	bl	80013cc <lcd_send_string>
	lcd_goto_XY(1, 0);
 80009d0:	2100      	movs	r1, #0
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 fd19 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"RedX - GreenY");
 80009d8:	463b      	mov	r3, r7
 80009da:	491a      	ldr	r1, [pc, #104]	; (8000a44 <fms_MAN_RED_GREEN+0x94>)
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fcb9 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 80009e2:	463b      	mov	r3, r7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fcf1 	bl	80013cc <lcd_send_string>

	set_red0_green1();
 80009ea:	f001 fb07 	bl	8001ffc <set_red0_green1>
	update7SEG(4);
 80009ee:	2004      	movs	r0, #4
 80009f0:	f000 fd2d 	bl	800144e <update7SEG>
	SCH_Add_Task(fsm_AUTO_RED_GREEN, 10000, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80009fa:	4813      	ldr	r0, [pc, #76]	; (8000a48 <fms_MAN_RED_GREEN+0x98>)
 80009fc:	f001 f8ea 	bl	8001bd4 <SCH_Add_Task>
	setCount(0, RedTime());
 8000a00:	f000 f916 	bl	8000c30 <RedTime>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4619      	mov	r1, r3
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fccf 	bl	80003ac <setCount>
	setCount(1, GreenTime());
 8000a0e:	f000 f905 	bl	8000c1c <GreenTime>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4619      	mov	r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff fcc8 	bl	80003ac <setCount>
	setBuffer(getCount(0), getCount(1));
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fcf3 	bl	8000408 <getCount>
 8000a22:	4604      	mov	r4, r0
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fcef 	bl	8000408 <getCount>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f000 fd16 	bl	8001460 <setBuffer>
	countAgain();
 8000a34:	f000 fd50 	bl	80014d8 <countAgain>
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	08005ab4 	.word	0x08005ab4
 8000a44:	08005ac0 	.word	0x08005ac0
 8000a48:	080004c1 	.word	0x080004c1

08000a4c <fms_MAN_RED_YELLOW>:
void fms_MAN_RED_YELLOW(){
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000a52:	2101      	movs	r1, #1
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 fcd8 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	491e      	ldr	r1, [pc, #120]	; (8000ad8 <fms_MAN_RED_YELLOW+0x8c>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fc78 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000a64:	463b      	mov	r3, r7
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fcb0 	bl	80013cc <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fccb 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"RedX - AmberY");
 8000a74:	463b      	mov	r3, r7
 8000a76:	4919      	ldr	r1, [pc, #100]	; (8000adc <fms_MAN_RED_YELLOW+0x90>)
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 fc6b 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fca3 	bl	80013cc <lcd_send_string>

	set_red0_amber1();
 8000a86:	f001 fad5 	bl	8002034 <set_red0_amber1>
	update7SEG(4); // Turn off all led
 8000a8a:	2004      	movs	r0, #4
 8000a8c:	f000 fcdf 	bl	800144e <update7SEG>
	SCH_Add_Task(fsm_AUTO_RED_YELLOW, 10000, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <fms_MAN_RED_YELLOW+0x94>)
 8000a98:	f001 f89c 	bl	8001bd4 <SCH_Add_Task>
	setCount(0, AmberTime());
 8000a9c:	f000 f8d2 	bl	8000c44 <AmberTime>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fc81 	bl	80003ac <setCount>
	setCount(1, AmberTime());
 8000aaa:	f000 f8cb 	bl	8000c44 <AmberTime>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fc7a 	bl	80003ac <setCount>
	setBuffer(getCount(0), getCount(1));
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fca5 	bl	8000408 <getCount>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fca1 	bl	8000408 <getCount>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4620      	mov	r0, r4
 8000acc:	f000 fcc8 	bl	8001460 <setBuffer>
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	08005ab4 	.word	0x08005ab4
 8000adc:	08005ad0 	.word	0x08005ad0
 8000ae0:	080005fd 	.word	0x080005fd

08000ae4 <fms_MAN_GREEN_RED>:
void fms_MAN_GREEN_RED(){
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000aea:	2101      	movs	r1, #1
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 fc8c 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 8000af2:	463b      	mov	r3, r7
 8000af4:	491f      	ldr	r1, [pc, #124]	; (8000b74 <fms_MAN_GREEN_RED+0x90>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 fc2c 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000afc:	463b      	mov	r3, r7
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fc64 	bl	80013cc <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 fc7f 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"GreenX - RedY");
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	491a      	ldr	r1, [pc, #104]	; (8000b78 <fms_MAN_GREEN_RED+0x94>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f004 fc1f 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000b16:	463b      	mov	r3, r7
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fc57 	bl	80013cc <lcd_send_string>

	set_green0_red1();
 8000b1e:	f001 faa5 	bl	800206c <set_green0_red1>
	update7SEG(4); // Turn off all led
 8000b22:	2004      	movs	r0, #4
 8000b24:	f000 fc93 	bl	800144e <update7SEG>
	SCH_Add_Task(fsm_AUTO_GREEN_RED, 10000, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b2e:	4813      	ldr	r0, [pc, #76]	; (8000b7c <fms_MAN_GREEN_RED+0x98>)
 8000b30:	f001 f850 	bl	8001bd4 <SCH_Add_Task>
	setCount(0, GreenTime());
 8000b34:	f000 f872 	bl	8000c1c <GreenTime>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fc35 	bl	80003ac <setCount>
	setCount(1, RedTime());
 8000b42:	f000 f875 	bl	8000c30 <RedTime>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fc2e 	bl	80003ac <setCount>
	setBuffer(getCount(0), getCount(1));
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fc59 	bl	8000408 <getCount>
 8000b56:	4604      	mov	r4, r0
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fc55 	bl	8000408 <getCount>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4620      	mov	r0, r4
 8000b64:	f000 fc7c 	bl	8001460 <setBuffer>
	countAgain();
 8000b68:	f000 fcb6 	bl	80014d8 <countAgain>

}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	08005ab4 	.word	0x08005ab4
 8000b78:	08005ae0 	.word	0x08005ae0
 8000b7c:	08000739 	.word	0x08000739

08000b80 <fms_MAN_YELLOW_RED>:
void fms_MAN_YELLOW_RED(){
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000b86:	2101      	movs	r1, #1
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 fc3e 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 8000b8e:	463b      	mov	r3, r7
 8000b90:	491f      	ldr	r1, [pc, #124]	; (8000c10 <fms_MAN_YELLOW_RED+0x90>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 fbde 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fc16 	bl	80013cc <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f000 fc31 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"AmberX - RedY");
 8000ba8:	463b      	mov	r3, r7
 8000baa:	491a      	ldr	r1, [pc, #104]	; (8000c14 <fms_MAN_YELLOW_RED+0x94>)
 8000bac:	4618      	mov	r0, r3
 8000bae:	f004 fbd1 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fc09 	bl	80013cc <lcd_send_string>

	set_amber0_red1();
 8000bba:	f001 fa73 	bl	80020a4 <set_amber0_red1>
	update7SEG(4); // Turn off all led
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f000 fc45 	bl	800144e <update7SEG>
	SCH_Add_Task(fsm_AUTO_YELLOW_RED, 10000, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f242 7110 	movw	r1, #10000	; 0x2710
 8000bca:	4813      	ldr	r0, [pc, #76]	; (8000c18 <fms_MAN_YELLOW_RED+0x98>)
 8000bcc:	f001 f802 	bl	8001bd4 <SCH_Add_Task>
	setCount(0, AmberTime());
 8000bd0:	f000 f838 	bl	8000c44 <AmberTime>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fbe7 	bl	80003ac <setCount>
	setCount(1, AmberTime());
 8000bde:	f000 f831 	bl	8000c44 <AmberTime>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4619      	mov	r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fbe0 	bl	80003ac <setCount>
	setBuffer(getCount(0), getCount(1));
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fc0b 	bl	8000408 <getCount>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff fc07 	bl	8000408 <getCount>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f000 fc2e 	bl	8001460 <setBuffer>
	countAgain();
 8000c04:	f000 fc68 	bl	80014d8 <countAgain>
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	08005ab4 	.word	0x08005ab4
 8000c14:	08005af0 	.word	0x08005af0
 8000c18:	08000875 	.word	0x08000875

08000c1c <GreenTime>:

int tmp_greentime = 5;
int tmp_redtime = 8;
int tmp_ambertime = 3;

int GreenTime() {
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
	return greentime;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <GreenTime+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	2000003c 	.word	0x2000003c

08000c30 <RedTime>:
int RedTime() {
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	return redtime;
 8000c34:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <RedTime+0x10>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000040 	.word	0x20000040

08000c44 <AmberTime>:
int AmberTime() {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	return ambertime;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <AmberTime+0x10>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	20000044 	.word	0x20000044

08000c58 <get_uart>:
}
void setAmberTime(int value){
	ambertime = value;
}

int get_uart(int index) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if (index == 1) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d107      	bne.n	8000c76 <get_uart+0x1e>
		int tmp = btn1;
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <get_uart+0x58>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
		btn1 = 0;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <get_uart+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
		return tmp;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	e016      	b.n	8000ca4 <get_uart+0x4c>
	}
	if (index == 2) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d107      	bne.n	8000c8c <get_uart+0x34>
		int tmp = btn2;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <get_uart+0x5c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	613b      	str	r3, [r7, #16]
		btn2 = 0;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <get_uart+0x5c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
		return tmp;
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	e00b      	b.n	8000ca4 <get_uart+0x4c>
	}
	if (index == 3) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d107      	bne.n	8000ca2 <get_uart+0x4a>
		int tmp = btn3;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <get_uart+0x60>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	617b      	str	r3, [r7, #20]
		btn3 = 0;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <get_uart+0x60>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		return tmp;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	e000      	b.n	8000ca4 <get_uart+0x4c>
	}
	return 0;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000fc 	.word	0x200000fc
 8000cb4:	20000100 	.word	0x20000100
 8000cb8:	20000104 	.word	0x20000104

08000cbc <fsm_SET_REDTIME>:

void fsm_SET_REDTIME(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fba0 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"Setting Red");
 8000cca:	463b      	mov	r3, r7
 8000ccc:	491f      	ldr	r1, [pc, #124]	; (8000d4c <fsm_SET_REDTIME+0x90>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fb40 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fb78 	bl	80013cc <lcd_send_string>
	if (tmp_redtime < 10) {
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <fsm_SET_REDTIME+0x94>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	dc07      	bgt.n	8000cf4 <fsm_SET_REDTIME+0x38>
		sprintf(buffer,"Mode:2,time:0%d", tmp_redtime);
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <fsm_SET_REDTIME+0x94>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	463b      	mov	r3, r7
 8000cea:	491a      	ldr	r1, [pc, #104]	; (8000d54 <fsm_SET_REDTIME+0x98>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fb31 	bl	8005354 <siprintf>
 8000cf2:	e006      	b.n	8000d02 <fsm_SET_REDTIME+0x46>
	}
	else {
		sprintf(buffer,"Mode:2,time:%d", tmp_redtime);
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <fsm_SET_REDTIME+0x94>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4917      	ldr	r1, [pc, #92]	; (8000d58 <fsm_SET_REDTIME+0x9c>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fb29 	bl	8005354 <siprintf>
	}
	lcd_goto_XY(1, 0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 fb80 	bl	800140a <lcd_goto_XY>
	lcd_send_string(buffer);
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fb5d 	bl	80013cc <lcd_send_string>

	if (!(toggle++)) setallRed();
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <fsm_SET_REDTIME+0xa0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	4910      	ldr	r1, [pc, #64]	; (8000d5c <fsm_SET_REDTIME+0xa0>)
 8000d1a:	600a      	str	r2, [r1, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <fsm_SET_REDTIME+0x6a>
 8000d20:	f001 f9dc 	bl	80020dc <setallRed>
 8000d24:	e008      	b.n	8000d38 <fsm_SET_REDTIME+0x7c>
	else if (toggle) {
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <fsm_SET_REDTIME+0xa0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <fsm_SET_REDTIME+0x7c>
		setallOff();
 8000d2e:	f001 fa29 	bl	8002184 <setallOff>
		toggle = 0;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <fsm_SET_REDTIME+0xa0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
	}
	SCH_Add_Task(fsm_SET_REDTIME, 250, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	21fa      	movs	r1, #250	; 0xfa
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <fsm_SET_REDTIME+0xa4>)
 8000d3e:	f000 ff49 	bl	8001bd4 <SCH_Add_Task>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08005b00 	.word	0x08005b00
 8000d50:	2000004c 	.word	0x2000004c
 8000d54:	08005b0c 	.word	0x08005b0c
 8000d58:	08005b1c 	.word	0x08005b1c
 8000d5c:	200000e8 	.word	0x200000e8
 8000d60:	08000cbd 	.word	0x08000cbd

08000d64 <fsm_SET_AMBERTIME>:
void fsm_SET_AMBERTIME(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 fb4c 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"Setting Amber");
 8000d72:	463b      	mov	r3, r7
 8000d74:	491f      	ldr	r1, [pc, #124]	; (8000df4 <fsm_SET_AMBERTIME+0x90>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 faec 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fb24 	bl	80013cc <lcd_send_string>
	if (tmp_redtime < 10) {
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <fsm_SET_AMBERTIME+0x94>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	dc07      	bgt.n	8000d9c <fsm_SET_AMBERTIME+0x38>
		sprintf(buffer,"Mode:3,time:0%d", tmp_ambertime);
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <fsm_SET_AMBERTIME+0x98>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	463b      	mov	r3, r7
 8000d92:	491b      	ldr	r1, [pc, #108]	; (8000e00 <fsm_SET_AMBERTIME+0x9c>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 fadd 	bl	8005354 <siprintf>
 8000d9a:	e006      	b.n	8000daa <fsm_SET_AMBERTIME+0x46>
	}
	else {
		sprintf(buffer,"Mode:3,time:%d", tmp_ambertime);
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <fsm_SET_AMBERTIME+0x98>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	463b      	mov	r3, r7
 8000da2:	4918      	ldr	r1, [pc, #96]	; (8000e04 <fsm_SET_AMBERTIME+0xa0>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fad5 	bl	8005354 <siprintf>
	}
	lcd_goto_XY(1, 0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2001      	movs	r0, #1
 8000dae:	f000 fb2c 	bl	800140a <lcd_goto_XY>
	lcd_send_string(buffer);
 8000db2:	463b      	mov	r3, r7
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fb09 	bl	80013cc <lcd_send_string>

	if (!(toggle++)) setallAmber();
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <fsm_SET_AMBERTIME+0xa4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	4911      	ldr	r1, [pc, #68]	; (8000e08 <fsm_SET_AMBERTIME+0xa4>)
 8000dc2:	600a      	str	r2, [r1, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <fsm_SET_AMBERTIME+0x6a>
 8000dc8:	f001 f9c0 	bl	800214c <setallAmber>
 8000dcc:	e008      	b.n	8000de0 <fsm_SET_AMBERTIME+0x7c>
	else if (toggle) {
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <fsm_SET_AMBERTIME+0xa4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d004      	beq.n	8000de0 <fsm_SET_AMBERTIME+0x7c>
		setallOff();
 8000dd6:	f001 f9d5 	bl	8002184 <setallOff>
		toggle = 0;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <fsm_SET_AMBERTIME+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
	}
	SCH_Add_Task(fsm_SET_AMBERTIME, 250, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	21fa      	movs	r1, #250	; 0xfa
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <fsm_SET_AMBERTIME+0xa8>)
 8000de6:	f000 fef5 	bl	8001bd4 <SCH_Add_Task>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08005b2c 	.word	0x08005b2c
 8000df8:	2000004c 	.word	0x2000004c
 8000dfc:	20000050 	.word	0x20000050
 8000e00:	08005b3c 	.word	0x08005b3c
 8000e04:	08005b4c 	.word	0x08005b4c
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	08000d65 	.word	0x08000d65

08000e10 <fsm_SET_GREENTIME>:
void fsm_SET_GREENTIME(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000e16:	2101      	movs	r1, #1
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 faf6 	bl	800140a <lcd_goto_XY>
	sprintf(buffer,"Setting Green");
 8000e1e:	463b      	mov	r3, r7
 8000e20:	491f      	ldr	r1, [pc, #124]	; (8000ea0 <fsm_SET_GREENTIME+0x90>)
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 fa96 	bl	8005354 <siprintf>
	lcd_send_string(buffer);
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 face 	bl	80013cc <lcd_send_string>
	if (tmp_redtime < 10) {
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <fsm_SET_GREENTIME+0x94>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	dc07      	bgt.n	8000e48 <fsm_SET_GREENTIME+0x38>
		sprintf(buffer,"Mode:4,time:0%d", tmp_greentime);
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <fsm_SET_GREENTIME+0x98>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	491b      	ldr	r1, [pc, #108]	; (8000eac <fsm_SET_GREENTIME+0x9c>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fa87 	bl	8005354 <siprintf>
 8000e46:	e006      	b.n	8000e56 <fsm_SET_GREENTIME+0x46>
	}
	else {
		sprintf(buffer,"Mode:4,time:%d", tmp_greentime);
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <fsm_SET_GREENTIME+0x98>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4918      	ldr	r1, [pc, #96]	; (8000eb0 <fsm_SET_GREENTIME+0xa0>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fa7f 	bl	8005354 <siprintf>
	}
	lcd_goto_XY(1, 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fad6 	bl	800140a <lcd_goto_XY>
	lcd_send_string(buffer);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fab3 	bl	80013cc <lcd_send_string>

	if (!(toggle++)) setallGreen();
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <fsm_SET_GREENTIME+0xa4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	4911      	ldr	r1, [pc, #68]	; (8000eb4 <fsm_SET_GREENTIME+0xa4>)
 8000e6e:	600a      	str	r2, [r1, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <fsm_SET_GREENTIME+0x6a>
 8000e74:	f001 f94e 	bl	8002114 <setallGreen>
 8000e78:	e008      	b.n	8000e8c <fsm_SET_GREENTIME+0x7c>
	else if (toggle) {
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <fsm_SET_GREENTIME+0xa4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <fsm_SET_GREENTIME+0x7c>
		setallOff();
 8000e82:	f001 f97f 	bl	8002184 <setallOff>
		toggle = 0;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <fsm_SET_GREENTIME+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
	}
	SCH_Add_Task(fsm_SET_GREENTIME, 250, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	21fa      	movs	r1, #250	; 0xfa
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <fsm_SET_GREENTIME+0xa8>)
 8000e92:	f000 fe9f 	bl	8001bd4 <SCH_Add_Task>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08005b5c 	.word	0x08005b5c
 8000ea4:	2000004c 	.word	0x2000004c
 8000ea8:	20000048 	.word	0x20000048
 8000eac:	08005b6c 	.word	0x08005b6c
 8000eb0:	08005b7c 	.word	0x08005b7c
 8000eb4:	200000e8 	.word	0x200000e8
 8000eb8:	08000e11 	.word	0x08000e11

08000ebc <fsm_mode>:

void fsm_mode () {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	if (isKeyPressed(0) || get_uart(1)) {
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff f9c9 	bl	8000258 <isKeyPressed>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <fsm_mode+0x1e>
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fec3 	bl	8000c58 <get_uart>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 8096 	beq.w	8001006 <fsm_mode+0x14a>
		switch (status) {
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <fsm_mode+0x154>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3b06      	subs	r3, #6
 8000ee0:	2b0a      	cmp	r3, #10
 8000ee2:	f200 8092 	bhi.w	800100a <fsm_mode+0x14e>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <fsm_mode+0x30>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000fed 	.word	0x08000fed
 8000ef0:	08000fed 	.word	0x08000fed
 8000ef4:	08000fed 	.word	0x08000fed
 8000ef8:	08000fed 	.word	0x08000fed
 8000efc:	08000f19 	.word	0x08000f19
 8000f00:	08000f33 	.word	0x08000f33
 8000f04:	08000f4d 	.word	0x08000f4d
 8000f08:	08000f67 	.word	0x08000f67
 8000f0c:	08000f81 	.word	0x08000f81
 8000f10:	08000fa5 	.word	0x08000fa5
 8000f14:	08000fc9 	.word	0x08000fc9
		case AUTO_RED_GREEN:
			SCH_Delete_Short_Task();
 8000f18:	f000 feba 	bl	8001c90 <SCH_Delete_Short_Task>
			status = MAN_RED_GREEN;
 8000f1c:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <fsm_mode+0x154>)
 8000f1e:	2206      	movs	r2, #6
 8000f20:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_RED_GREEN, 10, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210a      	movs	r1, #10
 8000f26:	483b      	ldr	r0, [pc, #236]	; (8001014 <fsm_mode+0x158>)
 8000f28:	f000 fe54 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8000f2c:	f000 fa63 	bl	80013f6 <lcd_clear_display>
			break;
 8000f30:	e06c      	b.n	800100c <fsm_mode+0x150>
		case AUTO_RED_YELLOW:
			SCH_Delete_Short_Task();
 8000f32:	f000 fead 	bl	8001c90 <SCH_Delete_Short_Task>
			status = MAN_RED_YELLOW;
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <fsm_mode+0x154>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_RED_YELLOW, 10, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	210a      	movs	r1, #10
 8000f40:	4835      	ldr	r0, [pc, #212]	; (8001018 <fsm_mode+0x15c>)
 8000f42:	f000 fe47 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8000f46:	f000 fa56 	bl	80013f6 <lcd_clear_display>
			break;
 8000f4a:	e05f      	b.n	800100c <fsm_mode+0x150>
		case AUTO_GREEN_RED:
			SCH_Delete_Short_Task();
 8000f4c:	f000 fea0 	bl	8001c90 <SCH_Delete_Short_Task>
			status = MAN_GREEN_RED;
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <fsm_mode+0x154>)
 8000f52:	2208      	movs	r2, #8
 8000f54:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_GREEN_RED, 10, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210a      	movs	r1, #10
 8000f5a:	4830      	ldr	r0, [pc, #192]	; (800101c <fsm_mode+0x160>)
 8000f5c:	f000 fe3a 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8000f60:	f000 fa49 	bl	80013f6 <lcd_clear_display>
			break;
 8000f64:	e052      	b.n	800100c <fsm_mode+0x150>
		case AUTO_YELLOW_RED:
			SCH_Delete_Short_Task();
 8000f66:	f000 fe93 	bl	8001c90 <SCH_Delete_Short_Task>
			status = MAN_YELLOW_RED;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <fsm_mode+0x154>)
 8000f6c:	2209      	movs	r2, #9
 8000f6e:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_YELLOW_RED, 10, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	210a      	movs	r1, #10
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <fsm_mode+0x164>)
 8000f76:	f000 fe2d 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8000f7a:	f000 fa3c 	bl	80013f6 <lcd_clear_display>
			break;
 8000f7e:	e045      	b.n	800100c <fsm_mode+0x150>
		case SET_REDTIME:
			SCH_Delete_Short_Task();
 8000f80:	f000 fe86 	bl	8001c90 <SCH_Delete_Short_Task>
			status = SET_AMBERTIME;
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <fsm_mode+0x154>)
 8000f86:	220f      	movs	r2, #15
 8000f88:	601a      	str	r2, [r3, #0]
			toggle = 0;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <fsm_mode+0x168>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
			countAgain();
 8000f90:	f000 faa2 	bl	80014d8 <countAgain>
			SCH_Add_Task(fsm_SET_AMBERTIME, 10, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	210a      	movs	r1, #10
 8000f98:	4823      	ldr	r0, [pc, #140]	; (8001028 <fsm_mode+0x16c>)
 8000f9a:	f000 fe1b 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8000f9e:	f000 fa2a 	bl	80013f6 <lcd_clear_display>
			break;
 8000fa2:	e033      	b.n	800100c <fsm_mode+0x150>
		case SET_AMBERTIME:
			SCH_Delete_Short_Task();
 8000fa4:	f000 fe74 	bl	8001c90 <SCH_Delete_Short_Task>
			status = SET_GREENTIME;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <fsm_mode+0x154>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	601a      	str	r2, [r3, #0]
			toggle = 0;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <fsm_mode+0x168>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
			countAgain();
 8000fb4:	f000 fa90 	bl	80014d8 <countAgain>
			SCH_Add_Task(fsm_SET_GREENTIME, 10, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210a      	movs	r1, #10
 8000fbc:	481b      	ldr	r0, [pc, #108]	; (800102c <fsm_mode+0x170>)
 8000fbe:	f000 fe09 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8000fc2:	f000 fa18 	bl	80013f6 <lcd_clear_display>
			break;
 8000fc6:	e021      	b.n	800100c <fsm_mode+0x150>
		case SET_GREENTIME:
			SCH_Delete_Short_Task();
 8000fc8:	f000 fe62 	bl	8001c90 <SCH_Delete_Short_Task>
			status = MODE0;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <fsm_mode+0x154>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
			toggle = 0;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <fsm_mode+0x168>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
			countAgain();
 8000fd8:	f000 fa7e 	bl	80014d8 <countAgain>
			SCH_Add_Task(fsm_INIT, 10, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	210a      	movs	r1, #10
 8000fe0:	4813      	ldr	r0, [pc, #76]	; (8001030 <fsm_mode+0x174>)
 8000fe2:	f000 fdf7 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8000fe6:	f000 fa06 	bl	80013f6 <lcd_clear_display>
			break;
 8000fea:	e00f      	b.n	800100c <fsm_mode+0x150>
		case MAN_RED_GREEN:
		case MAN_RED_YELLOW:
		case MAN_GREEN_RED:
		case MAN_YELLOW_RED:
			SCH_Delete_Short_Task();
 8000fec:	f000 fe50 	bl	8001c90 <SCH_Delete_Short_Task>
			status = SET_REDTIME;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <fsm_mode+0x154>)
 8000ff2:	220e      	movs	r2, #14
 8000ff4:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fsm_SET_REDTIME, 10, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <fsm_mode+0x178>)
 8000ffc:	f000 fdea 	bl	8001bd4 <SCH_Add_Task>
			lcd_clear_display();
 8001000:	f000 f9f9 	bl	80013f6 <lcd_clear_display>
			break;
 8001004:	e002      	b.n	800100c <fsm_mode+0x150>
		default:
			break;
		}
	}
 8001006:	bf00      	nop
 8001008:	e000      	b.n	800100c <fsm_mode+0x150>
			break;
 800100a:	bf00      	nop
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000ec 	.word	0x200000ec
 8001014:	080009b1 	.word	0x080009b1
 8001018:	08000a4d 	.word	0x08000a4d
 800101c:	08000ae5 	.word	0x08000ae5
 8001020:	08000b81 	.word	0x08000b81
 8001024:	200000e8 	.word	0x200000e8
 8001028:	08000d65 	.word	0x08000d65
 800102c:	08000e11 	.word	0x08000e11
 8001030:	08000441 	.word	0x08000441
 8001034:	08000cbd 	.word	0x08000cbd

08001038 <fsm_increase>:

void fsm_increase() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	if (isKeyPressed(1) || get_uart(2)) {
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff f90b 	bl	8000258 <isKeyPressed>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <fsm_increase+0x1c>
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff fe05 	bl	8000c58 <get_uart>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d07f      	beq.n	8001154 <fsm_increase+0x11c>
		switch(status) {
 8001054:	4b42      	ldr	r3, [pc, #264]	; (8001160 <fsm_increase+0x128>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3b06      	subs	r3, #6
 800105a:	2b0a      	cmp	r3, #10
 800105c:	d87c      	bhi.n	8001158 <fsm_increase+0x120>
 800105e:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <fsm_increase+0x2c>)
 8001060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001064:	08001091 	.word	0x08001091
 8001068:	080010a7 	.word	0x080010a7
 800106c:	080010bd 	.word	0x080010bd
 8001070:	080010d3 	.word	0x080010d3
 8001074:	08001159 	.word	0x08001159
 8001078:	08001159 	.word	0x08001159
 800107c:	08001159 	.word	0x08001159
 8001080:	08001159 	.word	0x08001159
 8001084:	080010e9 	.word	0x080010e9
 8001088:	0800110d 	.word	0x0800110d
 800108c:	08001131 	.word	0x08001131
		case MAN_RED_GREEN:
			status = MAN_RED_YELLOW;
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <fsm_increase+0x128>)
 8001092:	2207      	movs	r2, #7
 8001094:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 8001096:	f000 fdfb 	bl	8001c90 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_RED_YELLOW, 10, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	210a      	movs	r1, #10
 800109e:	4831      	ldr	r0, [pc, #196]	; (8001164 <fsm_increase+0x12c>)
 80010a0:	f000 fd98 	bl	8001bd4 <SCH_Add_Task>
			break;
 80010a4:	e059      	b.n	800115a <fsm_increase+0x122>

		case MAN_RED_YELLOW:
			status = MAN_GREEN_RED;
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <fsm_increase+0x128>)
 80010a8:	2208      	movs	r2, #8
 80010aa:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 80010ac:	f000 fdf0 	bl	8001c90 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_GREEN_RED, 10, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	210a      	movs	r1, #10
 80010b4:	482c      	ldr	r0, [pc, #176]	; (8001168 <fsm_increase+0x130>)
 80010b6:	f000 fd8d 	bl	8001bd4 <SCH_Add_Task>
			break;
 80010ba:	e04e      	b.n	800115a <fsm_increase+0x122>

		case MAN_GREEN_RED:
			status = MAN_YELLOW_RED;
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <fsm_increase+0x128>)
 80010be:	2209      	movs	r2, #9
 80010c0:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 80010c2:	f000 fde5 	bl	8001c90 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_YELLOW_RED, 10, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	210a      	movs	r1, #10
 80010ca:	4828      	ldr	r0, [pc, #160]	; (800116c <fsm_increase+0x134>)
 80010cc:	f000 fd82 	bl	8001bd4 <SCH_Add_Task>
			break;
 80010d0:	e043      	b.n	800115a <fsm_increase+0x122>
		case MAN_YELLOW_RED:
			status = MAN_RED_GREEN;
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <fsm_increase+0x128>)
 80010d4:	2206      	movs	r2, #6
 80010d6:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 80010d8:	f000 fdda 	bl	8001c90 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_RED_GREEN, 10, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	210a      	movs	r1, #10
 80010e0:	4823      	ldr	r0, [pc, #140]	; (8001170 <fsm_increase+0x138>)
 80010e2:	f000 fd77 	bl	8001bd4 <SCH_Add_Task>
			break;
 80010e6:	e038      	b.n	800115a <fsm_increase+0x122>

		case SET_REDTIME:
			tmp_redtime = (tmp_redtime + 1 > 99) ? 0 : tmp_redtime + 1;
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <fsm_increase+0x13c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b62      	cmp	r3, #98	; 0x62
 80010ee:	dc03      	bgt.n	80010f8 <fsm_increase+0xc0>
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <fsm_increase+0x13c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	e000      	b.n	80010fa <fsm_increase+0xc2>
 80010f8:	2300      	movs	r3, #0
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <fsm_increase+0x13c>)
 80010fc:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_redtime, 2);
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <fsm_increase+0x13c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2102      	movs	r1, #2
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f9ab 	bl	8001460 <setBuffer>
			break;
 800110a:	e026      	b.n	800115a <fsm_increase+0x122>

		case SET_AMBERTIME:
			tmp_ambertime = (tmp_ambertime + 1 > 99) ? 0 : tmp_ambertime + 1;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <fsm_increase+0x140>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b62      	cmp	r3, #98	; 0x62
 8001112:	dc03      	bgt.n	800111c <fsm_increase+0xe4>
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <fsm_increase+0x140>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	e000      	b.n	800111e <fsm_increase+0xe6>
 800111c:	2300      	movs	r3, #0
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <fsm_increase+0x140>)
 8001120:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_redtime, 2);
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <fsm_increase+0x13c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f999 	bl	8001460 <setBuffer>
			break;
 800112e:	e014      	b.n	800115a <fsm_increase+0x122>

		case SET_GREENTIME:
			tmp_greentime = (tmp_greentime + 1 > 99) ? 0 : tmp_greentime + 1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <fsm_increase+0x144>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b62      	cmp	r3, #98	; 0x62
 8001136:	dc03      	bgt.n	8001140 <fsm_increase+0x108>
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <fsm_increase+0x144>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	e000      	b.n	8001142 <fsm_increase+0x10a>
 8001140:	2300      	movs	r3, #0
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <fsm_increase+0x144>)
 8001144:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_greentime, 2);
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <fsm_increase+0x144>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2102      	movs	r1, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f987 	bl	8001460 <setBuffer>
			break;
 8001152:	e002      	b.n	800115a <fsm_increase+0x122>

		default:
			break;
		}
	}
 8001154:	bf00      	nop
 8001156:	e000      	b.n	800115a <fsm_increase+0x122>
			break;
 8001158:	bf00      	nop
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000ec 	.word	0x200000ec
 8001164:	08000a4d 	.word	0x08000a4d
 8001168:	08000ae5 	.word	0x08000ae5
 800116c:	08000b81 	.word	0x08000b81
 8001170:	080009b1 	.word	0x080009b1
 8001174:	2000004c 	.word	0x2000004c
 8001178:	20000050 	.word	0x20000050
 800117c:	20000048 	.word	0x20000048

08001180 <fsm_confirm>:
void fsm_confirm(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	if (isKeyPressed(2) || get_uart(3)) {
 8001184:	2002      	movs	r0, #2
 8001186:	f7ff f867 	bl	8000258 <isKeyPressed>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <fsm_confirm+0x1c>
 8001190:	2003      	movs	r0, #3
 8001192:	f7ff fd61 	bl	8000c58 <get_uart>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d076      	beq.n	800128a <fsm_confirm+0x10a>
		switch (status) {
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <fsm_confirm+0x114>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b10      	cmp	r3, #16
 80011a2:	d04b      	beq.n	800123c <fsm_confirm+0xbc>
 80011a4:	2b10      	cmp	r3, #16
 80011a6:	dc72      	bgt.n	800128e <fsm_confirm+0x10e>
 80011a8:	2b0e      	cmp	r3, #14
 80011aa:	d002      	beq.n	80011b2 <fsm_confirm+0x32>
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d027      	beq.n	8001200 <fsm_confirm+0x80>
			greentime = (redtime - ambertime);
			tmp_greentime = greentime;
			break;

		default:
			break;
 80011b0:	e06d      	b.n	800128e <fsm_confirm+0x10e>
			redtime = (tmp_redtime - ambertime < 0) ? redtime : tmp_redtime;
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <fsm_confirm+0x118>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <fsm_confirm+0x11c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da02      	bge.n	80011c6 <fsm_confirm+0x46>
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <fsm_confirm+0x120>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	e001      	b.n	80011ca <fsm_confirm+0x4a>
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <fsm_confirm+0x118>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a35      	ldr	r2, [pc, #212]	; (80012a0 <fsm_confirm+0x120>)
 80011cc:	6013      	str	r3, [r2, #0]
			tmp_redtime = (redtime == tmp_ambertime) ? tmp_redtime : redtime;
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <fsm_confirm+0x120>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <fsm_confirm+0x124>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d102      	bne.n	80011e0 <fsm_confirm+0x60>
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <fsm_confirm+0x118>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	e001      	b.n	80011e4 <fsm_confirm+0x64>
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <fsm_confirm+0x120>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2c      	ldr	r2, [pc, #176]	; (8001298 <fsm_confirm+0x118>)
 80011e6:	6013      	str	r3, [r2, #0]
			greentime = (redtime - ambertime);
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <fsm_confirm+0x120>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <fsm_confirm+0x11c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <fsm_confirm+0x128>)
 80011f4:	6013      	str	r3, [r2, #0]
			tmp_greentime = greentime;
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <fsm_confirm+0x128>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2c      	ldr	r2, [pc, #176]	; (80012ac <fsm_confirm+0x12c>)
 80011fc:	6013      	str	r3, [r2, #0]
			break;
 80011fe:	e047      	b.n	8001290 <fsm_confirm+0x110>
			ambertime = (tmp_ambertime + greentime > 99) ? ambertime : tmp_ambertime;
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <fsm_confirm+0x124>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <fsm_confirm+0x128>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4413      	add	r3, r2
 800120a:	2b63      	cmp	r3, #99	; 0x63
 800120c:	dd02      	ble.n	8001214 <fsm_confirm+0x94>
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <fsm_confirm+0x11c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	e001      	b.n	8001218 <fsm_confirm+0x98>
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <fsm_confirm+0x124>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a20      	ldr	r2, [pc, #128]	; (800129c <fsm_confirm+0x11c>)
 800121a:	6013      	str	r3, [r2, #0]
			tmp_ambertime = (tmp_ambertime == ambertime) ? tmp_ambertime : ambertime;
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <fsm_confirm+0x11c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <fsm_confirm+0x124>)
 8001222:	6013      	str	r3, [r2, #0]
			redtime = greentime + ambertime;
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <fsm_confirm+0x128>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <fsm_confirm+0x11c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4413      	add	r3, r2
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <fsm_confirm+0x120>)
 8001230:	6013      	str	r3, [r2, #0]
			tmp_redtime = redtime;
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <fsm_confirm+0x120>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <fsm_confirm+0x118>)
 8001238:	6013      	str	r3, [r2, #0]
			break;
 800123a:	e029      	b.n	8001290 <fsm_confirm+0x110>
			redtime = (tmp_redtime - ambertime < 0) ? redtime : tmp_redtime;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <fsm_confirm+0x118>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <fsm_confirm+0x11c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	da02      	bge.n	8001250 <fsm_confirm+0xd0>
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <fsm_confirm+0x120>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	e001      	b.n	8001254 <fsm_confirm+0xd4>
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <fsm_confirm+0x118>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <fsm_confirm+0x120>)
 8001256:	6013      	str	r3, [r2, #0]
			tmp_redtime = (redtime == tmp_ambertime) ? tmp_redtime : redtime;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <fsm_confirm+0x120>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <fsm_confirm+0x124>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d102      	bne.n	800126a <fsm_confirm+0xea>
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <fsm_confirm+0x118>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	e001      	b.n	800126e <fsm_confirm+0xee>
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <fsm_confirm+0x120>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <fsm_confirm+0x118>)
 8001270:	6013      	str	r3, [r2, #0]
			greentime = (redtime - ambertime);
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <fsm_confirm+0x120>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <fsm_confirm+0x11c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <fsm_confirm+0x128>)
 800127e:	6013      	str	r3, [r2, #0]
			tmp_greentime = greentime;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <fsm_confirm+0x128>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <fsm_confirm+0x12c>)
 8001286:	6013      	str	r3, [r2, #0]
			break;
 8001288:	e002      	b.n	8001290 <fsm_confirm+0x110>
		}
	}
 800128a:	bf00      	nop
 800128c:	e000      	b.n	8001290 <fsm_confirm+0x110>
			break;
 800128e:	bf00      	nop
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000ec 	.word	0x200000ec
 8001298:	2000004c 	.word	0x2000004c
 800129c:	20000044 	.word	0x20000044
 80012a0:	20000040 	.word	0x20000040
 80012a4:	20000050 	.word	0x20000050
 80012a8:	2000003c 	.word	0x2000003c
 80012ac:	20000048 	.word	0x20000048

080012b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f023 030f 	bic.w	r3, r3, #15
 80012c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f043 030c 	orr.w	r3, r3, #12
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	f043 030c 	orr.w	r3, r3, #12
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80012e6:	7bbb      	ldrb	r3, [r7, #14]
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80012f0:	f107 0208 	add.w	r2, r7, #8
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2304      	movs	r3, #4
 80012fa:	2142      	movs	r1, #66	; 0x42
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <lcd_send_cmd+0x5c>)
 80012fe:	f001 fd7f 	bl	8002e00 <HAL_I2C_Master_Transmit>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001bc 	.word	0x200001bc

08001310 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af02      	add	r7, sp, #8
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f023 030f 	bic.w	r3, r3, #15
 8001320:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f043 030d 	orr.w	r3, r3, #13
 800132e:	b2db      	uxtb	r3, r3
 8001330:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f043 0309 	orr.w	r3, r3, #9
 8001338:	b2db      	uxtb	r3, r3
 800133a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	f043 030d 	orr.w	r3, r3, #13
 8001342:	b2db      	uxtb	r3, r3
 8001344:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	f043 0309 	orr.w	r3, r3, #9
 800134c:	b2db      	uxtb	r3, r3
 800134e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001350:	f107 0208 	add.w	r2, r7, #8
 8001354:	2364      	movs	r3, #100	; 0x64
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2304      	movs	r3, #4
 800135a:	2142      	movs	r1, #66	; 0x42
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <lcd_send_data+0x5c>)
 800135e:	f001 fd4f 	bl	8002e00 <HAL_I2C_Master_Transmit>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001bc 	.word	0x200001bc

08001370 <lcd_init>:

void lcd_init (void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001374:	2033      	movs	r0, #51	; 0x33
 8001376:	f7ff ff9b 	bl	80012b0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800137a:	2032      	movs	r0, #50	; 0x32
 800137c:	f7ff ff98 	bl	80012b0 <lcd_send_cmd>
	HAL_Delay(50);
 8001380:	2032      	movs	r0, #50	; 0x32
 8001382:	f001 f827 	bl	80023d4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001386:	2028      	movs	r0, #40	; 0x28
 8001388:	f7ff ff92 	bl	80012b0 <lcd_send_cmd>
	HAL_Delay(50);
 800138c:	2032      	movs	r0, #50	; 0x32
 800138e:	f001 f821 	bl	80023d4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff ff8c 	bl	80012b0 <lcd_send_cmd>
	HAL_Delay(50);
 8001398:	2032      	movs	r0, #50	; 0x32
 800139a:	f001 f81b 	bl	80023d4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800139e:	2006      	movs	r0, #6
 80013a0:	f7ff ff86 	bl	80012b0 <lcd_send_cmd>
	HAL_Delay(50);
 80013a4:	2032      	movs	r0, #50	; 0x32
 80013a6:	f001 f815 	bl	80023d4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80013aa:	200c      	movs	r0, #12
 80013ac:	f7ff ff80 	bl	80012b0 <lcd_send_cmd>
	HAL_Delay(50);
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f001 f80f 	bl	80023d4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff ff7a 	bl	80012b0 <lcd_send_cmd>
	HAL_Delay(50);
 80013bc:	2032      	movs	r0, #50	; 0x32
 80013be:	f001 f809 	bl	80023d4 <HAL_Delay>
	lcd_send_cmd (0x80);
 80013c2:	2080      	movs	r0, #128	; 0x80
 80013c4:	f7ff ff74 	bl	80012b0 <lcd_send_cmd>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80013d4:	e006      	b.n	80013e4 <lcd_send_string+0x18>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff96 	bl	8001310 <lcd_send_data>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f4      	bne.n	80013d6 <lcd_send_string+0xa>
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <lcd_clear_display>:

void lcd_clear_display (void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ff58 	bl	80012b0 <lcd_send_cmd>
	HAL_Delay(50);
 8001400:	2032      	movs	r0, #50	; 0x32
 8001402:	f000 ffe7 	bl	80023d4 <HAL_Delay>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}

0800140a <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d108      	bne.n	800142c <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	337f      	adds	r3, #127	; 0x7f
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e008      	b.n	800143e <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	3340      	adds	r3, #64	; 0x40
 8001432:	b2db      	uxtb	r3, r3
 8001434:	b25b      	sxtb	r3, r3
 8001436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800143a:	b25b      	sxtb	r3, r3
 800143c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff35 	bl	80012b0 <lcd_send_cmd>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <update7SEG>:
//				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
//				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
//				break;
//	}
}
void update7SEG (int index){
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
//		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
//		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
//		break;
//	}
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <setBuffer>:
			index_led = 0;
		}
		update7SEG(index_led++);
}

void setBuffer(int led0, int led1) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led0/10;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <setBuffer+0x70>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	17db      	asrs	r3, r3, #31
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <setBuffer+0x74>)
 800147a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led0%10;
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <setBuffer+0x70>)
 8001480:	fb83 2301 	smull	r2, r3, r3, r1
 8001484:	109a      	asrs	r2, r3, #2
 8001486:	17cb      	asrs	r3, r1, #31
 8001488:	1ad2      	subs	r2, r2, r3
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	1aca      	subs	r2, r1, r3
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <setBuffer+0x74>)
 8001496:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led1/10;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <setBuffer+0x70>)
 800149c:	fb82 1203 	smull	r1, r2, r2, r3
 80014a0:	1092      	asrs	r2, r2, #2
 80014a2:	17db      	asrs	r3, r3, #31
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <setBuffer+0x74>)
 80014a8:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led1%10;
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <setBuffer+0x70>)
 80014ae:	fb83 2301 	smull	r2, r3, r3, r1
 80014b2:	109a      	asrs	r2, r3, #2
 80014b4:	17cb      	asrs	r3, r1, #31
 80014b6:	1ad2      	subs	r2, r2, r3
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	1aca      	subs	r2, r1, r3
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <setBuffer+0x74>)
 80014c4:	60da      	str	r2, [r3, #12]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	66666667 	.word	0x66666667
 80014d4:	20000130 	.word	0x20000130

080014d8 <countAgain>:

void countAgain() {
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	index_led = 0;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <countAgain+0x14>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000108 	.word	0x20000108

080014f0 <LEDRED>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDRED(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin);
 80014f4:	2120      	movs	r1, #32
 80014f6:	4802      	ldr	r0, [pc, #8]	; (8001500 <LEDRED+0x10>)
 80014f8:	f001 fb03 	bl	8002b02 <HAL_GPIO_TogglePin>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010800 	.word	0x40010800

08001504 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_UART_RxCpltCallback+0x5c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11f      	bne.n	8001556 <HAL_UART_RxCpltCallback+0x52>
		buffer_flag = 1;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_UART_RxCpltCallback+0x60>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
		buffer[index_buffer++] = cursor;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	b2d1      	uxtb	r1, r2
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 8001526:	7011      	strb	r1, [r2, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_UART_RxCpltCallback+0x68>)
 800152c:	7819      	ldrb	r1, [r3, #0]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_UART_RxCpltCallback+0x6c>)
 8001530:	5499      	strb	r1, [r3, r2]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b1e      	cmp	r3, #30
 8001538:	d102      	bne.n	8001540 <HAL_UART_RxCpltCallback+0x3c>
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
//		cursor = 'd';
		HAL_UART_Transmit(&huart2, &cursor, 1, 50);
 8001540:	2332      	movs	r3, #50	; 0x32
 8001542:	2201      	movs	r2, #1
 8001544:	4909      	ldr	r1, [pc, #36]	; (800156c <HAL_UART_RxCpltCallback+0x68>)
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <HAL_UART_RxCpltCallback+0x70>)
 8001548:	f003 f802 	bl	8004550 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &cursor, 1);
 800154c:	2201      	movs	r2, #1
 800154e:	4907      	ldr	r1, [pc, #28]	; (800156c <HAL_UART_RxCpltCallback+0x68>)
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <HAL_UART_RxCpltCallback+0x70>)
 8001552:	f003 f888 	bl	8004666 <HAL_UART_Receive_IT>
	}
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40004400 	.word	0x40004400
 8001564:	200000f5 	.word	0x200000f5
 8001568:	200000f8 	.word	0x200000f8
 800156c:	200000f4 	.word	0x200000f4
 8001570:	20000168 	.word	0x20000168
 8001574:	20000258 	.word	0x20000258

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	b091      	sub	sp, #68	; 0x44
 800157c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f000 fec7 	bl	8002310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f873 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f000 f957 	bl	8001838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800158a:	f000 f92b 	bl	80017e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800158e:	f000 f8dd 	bl	800174c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001592:	f000 f8ad 	bl	80016f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001596:	482a      	ldr	r0, [pc, #168]	; (8001640 <main+0xc8>)
 8001598:	f002 fbe8 	bl	8003d6c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &cursor, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	4929      	ldr	r1, [pc, #164]	; (8001644 <main+0xcc>)
 80015a0:	4829      	ldr	r0, [pc, #164]	; (8001648 <main+0xd0>)
 80015a2:	f003 f860 	bl	8004666 <HAL_UART_Receive_IT>
  uint8_t data[5] = "run";
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <main+0xd4>)
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	713b      	strb	r3, [r7, #4]
   HAL_UART_Transmit(&huart2, data, sizeof(data), 50);
 80015ae:	4639      	mov	r1, r7
 80015b0:	2332      	movs	r3, #50	; 0x32
 80015b2:	2205      	movs	r2, #5
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <main+0xd0>)
 80015b6:	f002 ffcb 	bl	8004550 <HAL_UART_Transmit>
  lcd_init();
 80015ba:	f7ff fed9 	bl	8001370 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80015be:	f000 fa3b 	bl	8001a38 <SCH_Init>
  SCH_Add_Task(LEDRED,2000,1000); //index0
 80015c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80015ca:	4821      	ldr	r0, [pc, #132]	; (8001650 <main+0xd8>)
 80015cc:	f000 fb02 	bl	8001bd4 <SCH_Add_Task>
  SCH_Add_Task(fsm_confirm, 250, 10); //index1
 80015d0:	220a      	movs	r2, #10
 80015d2:	21fa      	movs	r1, #250	; 0xfa
 80015d4:	481f      	ldr	r0, [pc, #124]	; (8001654 <main+0xdc>)
 80015d6:	f000 fafd 	bl	8001bd4 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 250, 10); //index2
 80015da:	220a      	movs	r2, #10
 80015dc:	21fa      	movs	r1, #250	; 0xfa
 80015de:	481e      	ldr	r0, [pc, #120]	; (8001658 <main+0xe0>)
 80015e0:	f000 faf8 	bl	8001bd4 <SCH_Add_Task>
  SCH_Add_Task(fsm_increase, 250, 10); //index3
 80015e4:	220a      	movs	r2, #10
 80015e6:	21fa      	movs	r1, #250	; 0xfa
 80015e8:	481c      	ldr	r0, [pc, #112]	; (800165c <main+0xe4>)
 80015ea:	f000 faf3 	bl	8001bd4 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode, 250, 10);
 80015ee:	220a      	movs	r2, #10
 80015f0:	21fa      	movs	r1, #250	; 0xfa
 80015f2:	481b      	ldr	r0, [pc, #108]	; (8001660 <main+0xe8>)
 80015f4:	f000 faee 	bl	8001bd4 <SCH_Add_Task>
  SCH_Add_Task(fsm_INIT, 10, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	210a      	movs	r1, #10
 80015fc:	4819      	ldr	r0, [pc, #100]	; (8001664 <main+0xec>)
 80015fe:	f000 fae9 	bl	8001bd4 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001602:	f000 fa9d 	bl	8001b40 <SCH_Dispatch_Tasks>
	  if (buffer_flag == 1) {
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <main+0xf0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d104      	bne.n	8001618 <main+0xa0>
		  command_read_fsm();
 800160e:	f7fe fe79 	bl	8000304 <command_read_fsm>
		  buffer_flag = 0;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <main+0xf0>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
	  }
	  uart_com_fsm(huart2);
 8001618:	4e0b      	ldr	r6, [pc, #44]	; (8001648 <main+0xd0>)
 800161a:	466d      	mov	r5, sp
 800161c:	f106 0410 	add.w	r4, r6, #16
 8001620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001630:	e885 0003 	stmia.w	r5, {r0, r1}
 8001634:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001638:	f000 fdc0 	bl	80021bc <uart_com_fsm>
	  SCH_Dispatch_Tasks();
 800163c:	e7e1      	b.n	8001602 <main+0x8a>
 800163e:	bf00      	nop
 8001640:	20000210 	.word	0x20000210
 8001644:	200000f4 	.word	0x200000f4
 8001648:	20000258 	.word	0x20000258
 800164c:	006e7572 	.word	0x006e7572
 8001650:	080014f1 	.word	0x080014f1
 8001654:	08001181 	.word	0x08001181
 8001658:	0800014d 	.word	0x0800014d
 800165c:	08001039 	.word	0x08001039
 8001660:	08000ebd 	.word	0x08000ebd
 8001664:	08000441 	.word	0x08000441
 8001668:	200000f5 	.word	0x200000f5

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b090      	sub	sp, #64	; 0x40
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fdac 	bl	80051d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168e:	2302      	movs	r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001692:	2301      	movs	r3, #1
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001696:	2310      	movs	r3, #16
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800169e:	2300      	movs	r3, #0
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 feff 	bl	80034b0 <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016b8:	f000 f978 	bl	80019ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	2302      	movs	r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80016c4:	23a0      	movs	r3, #160	; 0xa0
 80016c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2102      	movs	r1, #2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 f96a 	bl	80039b0 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80016e2:	f000 f963 	bl	80019ac <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3740      	adds	r7, #64	; 0x40
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_I2C1_Init+0x50>)
 80016f6:	4a13      	ldr	r2, [pc, #76]	; (8001744 <MX_I2C1_Init+0x54>)
 80016f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_I2C1_Init+0x50>)
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_I2C1_Init+0x58>)
 80016fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_I2C1_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_I2C1_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_I2C1_Init+0x50>)
 800170e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_I2C1_Init+0x50>)
 800172e:	f001 fa23 	bl	8002b78 <HAL_I2C_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001738:	f000 f938 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200001bc 	.word	0x200001bc
 8001744:	40005400 	.word	0x40005400
 8001748:	000186a0 	.word	0x000186a0

0800174c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_TIM2_Init+0x94>)
 800176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001772:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_TIM2_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001780:	2209      	movs	r2, #9
 8001782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_TIM2_Init+0x94>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001792:	f002 fa9b 	bl	8003ccc <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800179c:	f000 f906 	bl	80019ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_TIM2_Init+0x94>)
 80017ae:	f002 fc1f 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017b8:	f000 f8f8 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_TIM2_Init+0x94>)
 80017ca:	f002 fe01 	bl	80043d0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017d4:	f000 f8ea 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000210 	.word	0x20000210

080017e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART2_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 800181c:	f002 fe48 	bl	80044b0 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f000 f8c1 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000258 	.word	0x20000258
 8001834:	40004400 	.word	0x40004400

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <MX_GPIO_Init+0x14c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <MX_GPIO_Init+0x14c>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <MX_GPIO_Init+0x14c>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <MX_GPIO_Init+0x14c>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a46      	ldr	r2, [pc, #280]	; (8001984 <MX_GPIO_Init+0x14c>)
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <MX_GPIO_Init+0x14c>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b41      	ldr	r3, [pc, #260]	; (8001984 <MX_GPIO_Init+0x14c>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a40      	ldr	r2, [pc, #256]	; (8001984 <MX_GPIO_Init+0x14c>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <MX_GPIO_Init+0x14c>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <MX_GPIO_Init+0x14c>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <MX_GPIO_Init+0x14c>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b38      	ldr	r3, [pc, #224]	; (8001984 <MX_GPIO_Init+0x14c>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2120      	movs	r1, #32
 80018b0:	4835      	ldr	r0, [pc, #212]	; (8001988 <MX_GPIO_Init+0x150>)
 80018b2:	f001 f90e 	bl	8002ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4834      	ldr	r0, [pc, #208]	; (800198c <MX_GPIO_Init+0x154>)
 80018bc:	f001 f909 	bl	8002ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_LED0_Pin|D4_LED1_Pin|D10_LED1_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2168      	movs	r1, #104	; 0x68
 80018c4:	4832      	ldr	r0, [pc, #200]	; (8001990 <MX_GPIO_Init+0x158>)
 80018c6:	f001 f904 	bl	8002ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <MX_GPIO_Init+0x15c>)
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	482b      	ldr	r0, [pc, #172]	; (800198c <MX_GPIO_Init+0x154>)
 80018e0:	f000 ff5c 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Green_Led_Pin */
  GPIO_InitStruct.Pin = LD2_Green_Led_Pin;
 80018e4:	2320      	movs	r3, #32
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_Green_Led_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	4823      	ldr	r0, [pc, #140]	; (8001988 <MX_GPIO_Init+0x150>)
 80018fc:	f000 ff4e 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_btn1_Pin D5_btn0_Pin */
  GPIO_InitStruct.Pin = D6_btn1_Pin|D5_btn0_Pin;
 8001900:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4619      	mov	r1, r3
 8001914:	481e      	ldr	r0, [pc, #120]	; (8001990 <MX_GPIO_Init+0x158>)
 8001916:	f000 ff41 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LED0_Pin */
  GPIO_InitStruct.Pin = D9_LED0_Pin;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2302      	movs	r3, #2
 8001928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_LED0_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	4619      	mov	r1, r3
 8001930:	4816      	ldr	r0, [pc, #88]	; (800198c <MX_GPIO_Init+0x154>)
 8001932:	f000 ff33 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_btn2_Pin D8_btn3_Pin */
  GPIO_InitStruct.Pin = D7_btn2_Pin|D8_btn3_Pin;
 8001936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800193a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001940:	2301      	movs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	480f      	ldr	r0, [pc, #60]	; (8001988 <MX_GPIO_Init+0x150>)
 800194c:	f000 ff26 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_LED0_Pin D4_LED1_Pin D10_LED1_Pin */
  GPIO_InitStruct.Pin = D3_LED0_Pin|D4_LED1_Pin|D10_LED1_Pin;
 8001950:	2368      	movs	r3, #104	; 0x68
 8001952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2302      	movs	r3, #2
 800195e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	4619      	mov	r1, r3
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <MX_GPIO_Init+0x158>)
 8001968:	f000 ff18 	bl	800279c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2028      	movs	r0, #40	; 0x28
 8001972:	f000 fe2a 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001976:	2028      	movs	r0, #40	; 0x28
 8001978:	f000 fe43 	bl	8002602 <HAL_NVIC_EnableIRQ>

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800
 800198c:	40011000 	.word	0x40011000
 8001990:	40010c00 	.word	0x40010c00
 8001994:	10110000 	.word	0x10110000

08001998 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80019a0:	f000 f860 	bl	8001a64 <SCH_Update>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <Error_Handler+0x8>
	...

080019b8 <SCH_Delete_Task>:

#include <scheduler.h>

sTasks SCH_tasks_G[SCH_MAX_TASK];

void SCH_Delete_Task(const unsigned char TASK_INDEX) {
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	if (TASK_INDEX < SCH_MAX_TASK ) {
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d830      	bhi.n	8001a2a <SCH_Delete_Task+0x72>
		SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80019c8:	79fa      	ldrb	r2, [r7, #7]
 80019ca:	491a      	ldr	r1, [pc, #104]	; (8001a34 <SCH_Delete_Task+0x7c>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Delay = 0;
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4915      	ldr	r1, [pc, #84]	; (8001a34 <SCH_Delete_Task+0x7c>)
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	3304      	adds	r3, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Period = 0;
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	4910      	ldr	r1, [pc, #64]	; (8001a34 <SCH_Delete_Task+0x7c>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3308      	adds	r3, #8
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Runme = 0;
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	490b      	ldr	r1, [pc, #44]	; (8001a34 <SCH_Delete_Task+0x7c>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	330c      	adds	r3, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].TaskID = 0;
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	4906      	ldr	r1, [pc, #24]	; (8001a34 <SCH_Delete_Task+0x7c>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3310      	adds	r3, #16
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	200002a0 	.word	0x200002a0

08001a38 <SCH_Init>:

void SCH_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	e006      	b.n	8001a52 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffb6 	bl	80019b8 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d9f5      	bls.n	8001a44 <SCH_Init+0xc>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <SCH_Update>:

void SCH_Update(void) {
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	e05c      	b.n	8001b2a <SCH_Update+0xc6>
		if (SCH_tasks_G[Index].pTask) {
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	4932      	ldr	r1, [pc, #200]	; (8001b3c <SCH_Update+0xd8>)
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d04f      	beq.n	8001b24 <SCH_Update+0xc0>
			if (SCH_tasks_G[Index].Delay == 0) {
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	492d      	ldr	r1, [pc, #180]	; (8001b3c <SCH_Update+0xd8>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3304      	adds	r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d132      	bne.n	8001b00 <SCH_Update+0x9c>
				SCH_tasks_G[Index].Runme += 1;
 8001a9a:	79fa      	ldrb	r2, [r7, #7]
 8001a9c:	4927      	ldr	r1, [pc, #156]	; (8001b3c <SCH_Update+0xd8>)
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	79fa      	ldrb	r2, [r7, #7]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2d8      	uxtb	r0, r3
 8001ab2:	4922      	ldr	r1, [pc, #136]	; (8001b3c <SCH_Update+0xd8>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	330c      	adds	r3, #12
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period){
 8001ac4:	79fa      	ldrb	r2, [r7, #7]
 8001ac6:	491d      	ldr	r1, [pc, #116]	; (8001b3c <SCH_Update+0xd8>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d024      	beq.n	8001b24 <SCH_Update+0xc0>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001ada:	79f9      	ldrb	r1, [r7, #7]
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	4817      	ldr	r0, [pc, #92]	; (8001b3c <SCH_Update+0xd8>)
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4403      	add	r3, r0
 8001aea:	3308      	adds	r3, #8
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	4813      	ldr	r0, [pc, #76]	; (8001b3c <SCH_Update+0xd8>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4403      	add	r3, r0
 8001afa:	3304      	adds	r3, #4
 8001afc:	6019      	str	r1, [r3, #0]
 8001afe:	e011      	b.n	8001b24 <SCH_Update+0xc0>
				}
			}
			else {
				SCH_tasks_G[Index].Delay--;
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	490e      	ldr	r1, [pc, #56]	; (8001b3c <SCH_Update+0xd8>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3304      	adds	r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1e59      	subs	r1, r3, #1
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <SCH_Update+0xd8>)
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4403      	add	r3, r0
 8001b20:	3304      	adds	r3, #4
 8001b22:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	3301      	adds	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d99f      	bls.n	8001a70 <SCH_Update+0xc>
			}
		}
	}
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	200002a0 	.word	0x200002a0

08001b40 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	e039      	b.n	8001bc0 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[Index].Runme > 0) {
 8001b4c:	79fa      	ldrb	r2, [r7, #7]
 8001b4e:	4920      	ldr	r1, [pc, #128]	; (8001bd0 <SCH_Dispatch_Tasks+0x90>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	330c      	adds	r3, #12
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d02b      	beq.n	8001bba <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	491a      	ldr	r1, [pc, #104]	; (8001bd0 <SCH_Dispatch_Tasks+0x90>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4798      	blx	r3
			SCH_tasks_G[Index].Runme--;
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <SCH_Dispatch_Tasks+0x90>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	330c      	adds	r3, #12
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b2d8      	uxtb	r0, r3
 8001b8a:	4911      	ldr	r1, [pc, #68]	; (8001bd0 <SCH_Dispatch_Tasks+0x90>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	330c      	adds	r3, #12
 8001b98:	4602      	mov	r2, r0
 8001b9a:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0) {
 8001b9c:	79fa      	ldrb	r2, [r7, #7]
 8001b9e:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <SCH_Dispatch_Tasks+0x90>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3308      	adds	r3, #8
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff feff 	bl	80019b8 <SCH_Delete_Task>
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	2b09      	cmp	r3, #9
 8001bc4:	d9c2      	bls.n	8001b4c <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200002a0 	.word	0x200002a0

08001bd4 <SCH_Add_Task>:
void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 8001be4:	e002      	b.n	8001bec <SCH_Add_Task+0x18>
		Index++;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	3301      	adds	r3, #1
 8001bea:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 8001bec:	7dfa      	ldrb	r2, [r7, #23]
 8001bee:	4926      	ldr	r1, [pc, #152]	; (8001c88 <SCH_Add_Task+0xb4>)
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <SCH_Add_Task+0x32>
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b09      	cmp	r3, #9
 8001c04:	d9ef      	bls.n	8001be6 <SCH_Add_Task+0x12>
	}
	if (Index < SCH_MAX_TASK) {
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	d838      	bhi.n	8001c7e <SCH_Add_Task+0xaa>
		SCH_tasks_G[Index].pTask = pFunction;
 8001c0c:	7dfa      	ldrb	r2, [r7, #23]
 8001c0e:	491e      	ldr	r1, [pc, #120]	; (8001c88 <SCH_Add_Task+0xb4>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Delay = DELAY/TICK;
 8001c1e:	7dfa      	ldrb	r2, [r7, #23]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	491a      	ldr	r1, [pc, #104]	; (8001c8c <SCH_Add_Task+0xb8>)
 8001c24:	fba1 1303 	umull	r1, r3, r1, r3
 8001c28:	08d9      	lsrs	r1, r3, #3
 8001c2a:	4817      	ldr	r0, [pc, #92]	; (8001c88 <SCH_Add_Task+0xb4>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4403      	add	r3, r0
 8001c36:	3304      	adds	r3, #4
 8001c38:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Period = PERIOD/TICK;
 8001c3a:	7dfa      	ldrb	r2, [r7, #23]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4913      	ldr	r1, [pc, #76]	; (8001c8c <SCH_Add_Task+0xb8>)
 8001c40:	fba1 1303 	umull	r1, r3, r1, r3
 8001c44:	08d9      	lsrs	r1, r3, #3
 8001c46:	4810      	ldr	r0, [pc, #64]	; (8001c88 <SCH_Add_Task+0xb4>)
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4403      	add	r3, r0
 8001c52:	3308      	adds	r3, #8
 8001c54:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Runme = 0;
 8001c56:	7dfa      	ldrb	r2, [r7, #23]
 8001c58:	490b      	ldr	r1, [pc, #44]	; (8001c88 <SCH_Add_Task+0xb4>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	330c      	adds	r3, #12
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[Index].TaskID = Index;
 8001c6a:	7dfa      	ldrb	r2, [r7, #23]
 8001c6c:	7df9      	ldrb	r1, [r7, #23]
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <SCH_Add_Task+0xb4>)
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4403      	add	r3, r0
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	6019      	str	r1, [r3, #0]
	}
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	200002a0 	.word	0x200002a0
 8001c8c:	cccccccd 	.word	0xcccccccd

08001c90 <SCH_Delete_Short_Task>:

void SCH_Delete_Short_Task(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	e01c      	b.n	8001cd6 <SCH_Delete_Short_Task+0x46>
		if (SCH_tasks_G[i].Period == 0 && SCH_tasks_G[i].Delay != 0) {
 8001c9c:	79fa      	ldrb	r2, [r7, #7]
 8001c9e:	4912      	ldr	r1, [pc, #72]	; (8001ce8 <SCH_Delete_Short_Task+0x58>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	3308      	adds	r3, #8
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10e      	bne.n	8001cd0 <SCH_Delete_Short_Task+0x40>
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <SCH_Delete_Short_Task+0x58>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <SCH_Delete_Short_Task+0x40>
			SCH_Delete_Task(i);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe74 	bl	80019b8 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d9df      	bls.n	8001c9c <SCH_Delete_Short_Task+0xc>
		}
	}
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200002a0 	.word	0x200002a0

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MspInit+0x60>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_MspInit+0x60>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_I2C_MspInit+0x90>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d132      	bne.n	8001dd6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <HAL_I2C_MspInit+0x98>)
 8001d9e:	f000 fcfd 	bl	800279c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_I2C_MspInit+0x9c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <HAL_I2C_MspInit+0x9c>)
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40005400 	.word	0x40005400
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40010000 	.word	0x40010000

08001df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d113      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_TIM_Base_MspInit+0x44>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_TIM_Base_MspInit+0x44>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_TIM_Base_MspInit+0x44>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201c      	movs	r0, #28
 8001e20:	f000 fbd3 	bl	80025ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e24:	201c      	movs	r0, #28
 8001e26:	f000 fbec 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_UART_MspInit+0x80>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d12b      	bne.n	8001eb0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_UART_MspInit+0x84>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_UART_MspInit+0x84>)
 8001e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e62:	61d3      	str	r3, [r2, #28]
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_UART_MspInit+0x84>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_UART_MspInit+0x84>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_UART_MspInit+0x84>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_UART_MspInit+0x84>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e88:	230c      	movs	r3, #12
 8001e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <HAL_UART_MspInit+0x88>)
 8001e9c:	f000 fc7e 	bl	800279c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2026      	movs	r0, #38	; 0x26
 8001ea6:	f000 fb90 	bl	80025ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eaa:	2026      	movs	r0, #38	; 0x26
 8001eac:	f000 fba9 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40004400 	.word	0x40004400
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010800 	.word	0x40010800

08001ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <NMI_Handler+0x4>

08001eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0a:	f000 fa47 	bl	800239c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM2_IRQHandler+0x10>)
 8001f1a:	f001 ff79 	bl	8003e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000210 	.word	0x20000210

08001f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <USART2_IRQHandler+0x10>)
 8001f2e:	f002 fbbf 	bl	80046b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000258 	.word	0x20000258

08001f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f44:	f000 fdf6 	bl	8002b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f003 f902 	bl	8005184 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20005000 	.word	0x20005000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	2000010c 	.word	0x2000010c
 8001fb4:	20000380 	.word	0x20000380

08001fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <set_off0_off1>:
 */

#include <traffic_light.h>
#include <led7_segment.h>
// - ways
void set_off0_off1(){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <set_off0_off1+0x30>)
 8001fce:	f000 fd80 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2140      	movs	r1, #64	; 0x40
 8001fd6:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <set_off0_off1+0x34>)
 8001fd8:	f000 fd7b 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2108      	movs	r1, #8
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <set_off0_off1+0x34>)
 8001fe2:	f000 fd76 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <set_off0_off1+0x34>)
 8001fec:	f000 fd71 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40010c00 	.word	0x40010c00

08001ffc <set_red0_green1>:

void set_red0_green1(){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8002000:	2201      	movs	r2, #1
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	4809      	ldr	r0, [pc, #36]	; (800202c <set_red0_green1+0x30>)
 8002006:	f000 fd64 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 800200a:	2201      	movs	r2, #1
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	4808      	ldr	r0, [pc, #32]	; (8002030 <set_red0_green1+0x34>)
 8002010:	f000 fd5f 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	2120      	movs	r1, #32
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <set_red0_green1+0x30>)
 800201a:	f000 fd5a 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 800201e:	2201      	movs	r2, #1
 8002020:	2108      	movs	r1, #8
 8002022:	4802      	ldr	r0, [pc, #8]	; (800202c <set_red0_green1+0x30>)
 8002024:	f000 fd55 	bl	8002ad2 <HAL_GPIO_WritePin>

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000

08002034 <set_red0_amber1>:
void set_red0_amber1() {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <set_red0_amber1+0x30>)
 800203e:	f000 fd48 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <set_red0_amber1+0x34>)
 8002048:	f000 fd43 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2120      	movs	r1, #32
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <set_red0_amber1+0x30>)
 8002052:	f000 fd3e 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	2108      	movs	r1, #8
 800205a:	4802      	ldr	r0, [pc, #8]	; (8002064 <set_red0_amber1+0x30>)
 800205c:	f000 fd39 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010c00 	.word	0x40010c00
 8002068:	40011000 	.word	0x40011000

0800206c <set_green0_red1>:
void set_green0_red1() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2140      	movs	r1, #64	; 0x40
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <set_green0_red1+0x30>)
 8002076:	f000 fd2c 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	4808      	ldr	r0, [pc, #32]	; (80020a0 <set_green0_red1+0x34>)
 8002080:	f000 fd27 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2120      	movs	r1, #32
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <set_green0_red1+0x30>)
 800208a:	f000 fd22 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2108      	movs	r1, #8
 8002092:	4802      	ldr	r0, [pc, #8]	; (800209c <set_green0_red1+0x30>)
 8002094:	f000 fd1d 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	40011000 	.word	0x40011000

080020a4 <set_amber0_red1>:
void set_amber0_red1()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2140      	movs	r1, #64	; 0x40
 80020ac:	4809      	ldr	r0, [pc, #36]	; (80020d4 <set_amber0_red1+0x30>)
 80020ae:	f000 fd10 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	4808      	ldr	r0, [pc, #32]	; (80020d8 <set_amber0_red1+0x34>)
 80020b8:	f000 fd0b 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	2120      	movs	r1, #32
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <set_amber0_red1+0x30>)
 80020c2:	f000 fd06 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2108      	movs	r1, #8
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <set_amber0_red1+0x30>)
 80020cc:	f000 fd01 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010c00 	.word	0x40010c00
 80020d8:	40011000 	.word	0x40011000

080020dc <setallRed>:

void setallRed() {
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <setallRed+0x30>)
 80020e6:	f000 fcf4 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	4808      	ldr	r0, [pc, #32]	; (8002110 <setallRed+0x34>)
 80020f0:	f000 fcef 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	2120      	movs	r1, #32
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <setallRed+0x30>)
 80020fa:	f000 fcea 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 80020fe:	2201      	movs	r2, #1
 8002100:	2108      	movs	r1, #8
 8002102:	4802      	ldr	r0, [pc, #8]	; (800210c <setallRed+0x30>)
 8002104:	f000 fce5 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40010c00 	.word	0x40010c00
 8002110:	40011000 	.word	0x40011000

08002114 <setallGreen>:
void setallGreen() {
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <setallGreen+0x30>)
 800211e:	f000 fcd8 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8002122:	2201      	movs	r2, #1
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	4808      	ldr	r0, [pc, #32]	; (8002148 <setallGreen+0x34>)
 8002128:	f000 fcd3 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	2120      	movs	r1, #32
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <setallGreen+0x30>)
 8002132:	f000 fcce 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 8002136:	2201      	movs	r2, #1
 8002138:	2108      	movs	r1, #8
 800213a:	4802      	ldr	r0, [pc, #8]	; (8002144 <setallGreen+0x30>)
 800213c:	f000 fcc9 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40010c00 	.word	0x40010c00
 8002148:	40011000 	.word	0x40011000

0800214c <setallAmber>:
void setallAmber() {
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8002150:	2201      	movs	r2, #1
 8002152:	2140      	movs	r1, #64	; 0x40
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <setallAmber+0x30>)
 8002156:	f000 fcbc 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	4808      	ldr	r0, [pc, #32]	; (8002180 <setallAmber+0x34>)
 8002160:	f000 fcb7 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8002164:	2201      	movs	r2, #1
 8002166:	2120      	movs	r1, #32
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <setallAmber+0x30>)
 800216a:	f000 fcb2 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2108      	movs	r1, #8
 8002172:	4802      	ldr	r0, [pc, #8]	; (800217c <setallAmber+0x30>)
 8002174:	f000 fcad 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40010c00 	.word	0x40010c00
 8002180:	40011000 	.word	0x40011000

08002184 <setallOff>:
void setallOff() {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <setallOff+0x30>)
 800218e:	f000 fca0 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <setallOff+0x34>)
 8002198:	f000 fc9b 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	2108      	movs	r1, #8
 80021a0:	4805      	ldr	r0, [pc, #20]	; (80021b8 <setallOff+0x34>)
 80021a2:	f000 fc96 	bl	8002ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2120      	movs	r1, #32
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <setallOff+0x34>)
 80021ac:	f000 fc91 	bl	8002ad2 <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40010c00 	.word	0x40010c00

080021bc <uart_com_fsm>:
 *      Author: My Laptop
 */

#include <uart_com.h>
#include <main.h>
void uart_com_fsm(UART_HandleTypeDef huart2) {
 80021bc:	b084      	sub	sp, #16
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	f107 0c20 	add.w	ip, r7, #32
 80021c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch(status_uart) {
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <uart_com_fsm+0xe4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b0a      	cmp	r3, #10
 80021d2:	d002      	beq.n	80021da <uart_com_fsm+0x1e>
 80021d4:	2b0b      	cmp	r3, #11
 80021d6:	d00b      	beq.n	80021f0 <uart_com_fsm+0x34>
				status_uart = WAIT_RST;
			}

			break;
		default:
			break;
 80021d8:	e05a      	b.n	8002290 <uart_com_fsm+0xd4>
			if (command_flag == 1) {
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <uart_com_fsm+0xe8>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d153      	bne.n	800228a <uart_com_fsm+0xce>
				command_flag = 0;
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <uart_com_fsm+0xe8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
				status_uart = SEND_ADC;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <uart_com_fsm+0xe4>)
 80021ea:	220b      	movs	r2, #11
 80021ec:	601a      	str	r2, [r3, #0]
			break;
 80021ee:	e04c      	b.n	800228a <uart_com_fsm+0xce>
			if (command[0]=='1') {
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <uart_com_fsm+0xec>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b31      	cmp	r3, #49	; 0x31
 80021f6:	d115      	bne.n	8002224 <uart_com_fsm+0x68>
				btn1 = 1;
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <uart_com_fsm+0xf0>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
				uint8_t data3[5] ="btn1";
 80021fe:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <uart_com_fsm+0xf4>)
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002208:	6018      	str	r0, [r3, #0]
 800220a:	3304      	adds	r3, #4
 800220c:	7019      	strb	r1, [r3, #0]
				HAL_UART_Transmit(&huart2, data3, sizeof(data3), 50);
 800220e:	f107 0110 	add.w	r1, r7, #16
 8002212:	2332      	movs	r3, #50	; 0x32
 8002214:	2205      	movs	r2, #5
 8002216:	f107 0020 	add.w	r0, r7, #32
 800221a:	f002 f999 	bl	8004550 <HAL_UART_Transmit>
				status_uart = WAIT_RST;
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <uart_com_fsm+0xe4>)
 8002220:	220a      	movs	r2, #10
 8002222:	601a      	str	r2, [r3, #0]
			if (command[0] =='2') {
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <uart_com_fsm+0xec>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b32      	cmp	r3, #50	; 0x32
 800222a:	d115      	bne.n	8002258 <uart_com_fsm+0x9c>
				btn2 = 1;
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <uart_com_fsm+0xf8>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
				uint8_t data3[5] ="btn2";
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <uart_com_fsm+0xfc>)
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800223c:	6018      	str	r0, [r3, #0]
 800223e:	3304      	adds	r3, #4
 8002240:	7019      	strb	r1, [r3, #0]
				HAL_UART_Transmit(&huart2, data3, sizeof(data3), 50);
 8002242:	f107 0108 	add.w	r1, r7, #8
 8002246:	2332      	movs	r3, #50	; 0x32
 8002248:	2205      	movs	r2, #5
 800224a:	f107 0020 	add.w	r0, r7, #32
 800224e:	f002 f97f 	bl	8004550 <HAL_UART_Transmit>
				status_uart = WAIT_RST;
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <uart_com_fsm+0xe4>)
 8002254:	220a      	movs	r2, #10
 8002256:	601a      	str	r2, [r3, #0]
			if (command[0] == '3') {
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <uart_com_fsm+0xec>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b33      	cmp	r3, #51	; 0x33
 800225e:	d116      	bne.n	800228e <uart_com_fsm+0xd2>
				btn3 = 1;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <uart_com_fsm+0x100>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
				uint8_t data3[5] ="btn3";
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <uart_com_fsm+0x104>)
 8002268:	463b      	mov	r3, r7
 800226a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800226e:	6018      	str	r0, [r3, #0]
 8002270:	3304      	adds	r3, #4
 8002272:	7019      	strb	r1, [r3, #0]
				HAL_UART_Transmit(&huart2, data3, sizeof(data3), 50);
 8002274:	4639      	mov	r1, r7
 8002276:	2332      	movs	r3, #50	; 0x32
 8002278:	2205      	movs	r2, #5
 800227a:	f107 0020 	add.w	r0, r7, #32
 800227e:	f002 f967 	bl	8004550 <HAL_UART_Transmit>
				status_uart = WAIT_RST;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <uart_com_fsm+0xe4>)
 8002284:	220a      	movs	r2, #10
 8002286:	601a      	str	r2, [r3, #0]
			break;
 8002288:	e001      	b.n	800228e <uart_com_fsm+0xd2>
			break;
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <uart_com_fsm+0xd4>
			break;
 800228e:	bf00      	nop
		}
}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800229a:	b004      	add	sp, #16
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000054 	.word	0x20000054
 80022a4:	200000f7 	.word	0x200000f7
 80022a8:	20000148 	.word	0x20000148
 80022ac:	200000fc 	.word	0x200000fc
 80022b0:	08005b8c 	.word	0x08005b8c
 80022b4:	20000100 	.word	0x20000100
 80022b8:	08005b94 	.word	0x08005b94
 80022bc:	20000104 	.word	0x20000104
 80022c0:	08005b9c 	.word	0x08005b9c

080022c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c4:	f7ff fe78 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c8:	480b      	ldr	r0, [pc, #44]	; (80022f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022ca:	490c      	ldr	r1, [pc, #48]	; (80022fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d0:	e002      	b.n	80022d8 <LoopCopyDataInit>

080022d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d6:	3304      	adds	r3, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022dc:	d3f9      	bcc.n	80022d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e0:	4c09      	ldr	r4, [pc, #36]	; (8002308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e4:	e001      	b.n	80022ea <LoopFillZerobss>

080022e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e8:	3204      	adds	r2, #4

080022ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ec:	d3fb      	bcc.n	80022e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ee:	f002 ff4f 	bl	8005190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022f2:	f7ff f941 	bl	8001578 <main>
  bx lr
 80022f6:	4770      	bx	lr
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002300:	08005c0c 	.word	0x08005c0c
  ldr r2, =_sbss
 8002304:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002308:	2000037c 	.word	0x2000037c

0800230c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_2_IRQHandler>
	...

08002310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_Init+0x28>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_Init+0x28>)
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f947 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002326:	2000      	movs	r0, #0
 8002328:	f000 f808 	bl	800233c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232c:	f7ff fcde 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000

0800233c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_InitTick+0x54>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x58>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002352:	fbb3 f3f1 	udiv	r3, r3, r1
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f95f 	bl	800261e <HAL_SYSTICK_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e00e      	b.n	8002388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b0f      	cmp	r3, #15
 800236e:	d80a      	bhi.n	8002386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002370:	2200      	movs	r2, #0
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f000 f927 	bl	80025ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_InitTick+0x5c>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000058 	.word	0x20000058
 8002394:	20000060 	.word	0x20000060
 8002398:	2000005c 	.word	0x2000005c

0800239c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_IncTick+0x1c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_IncTick+0x20>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	4a03      	ldr	r2, [pc, #12]	; (80023bc <HAL_IncTick+0x20>)
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20000060 	.word	0x20000060
 80023bc:	20000368 	.word	0x20000368

080023c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return uwTick;
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <HAL_GetTick+0x10>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000368 	.word	0x20000368

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff fff0 	bl	80023c0 <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffe0 	bl	80023c0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000060 	.word	0x20000060

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4906      	ldr	r1, [pc, #24]	; (80024b4 <__NVIC_EnableIRQ+0x34>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002580:	d301      	bcc.n	8002586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002582:	2301      	movs	r3, #1
 8002584:	e00f      	b.n	80025a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <SysTick_Config+0x40>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258e:	210f      	movs	r1, #15
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f7ff ff90 	bl	80024b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <SysTick_Config+0x40>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SysTick_Config+0x40>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff2d 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025dc:	f7ff ff42 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7ff ff90 	bl	800250c <NVIC_EncodePriority>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff5f 	bl	80024b8 <__NVIC_SetPriority>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff35 	bl	8002480 <__NVIC_EnableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffa2 	bl	8002570 <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d008      	beq.n	8002660 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e020      	b.n	80026a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 020e 	bic.w	r2, r2, #14
 800266e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d005      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2204      	movs	r2, #4
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e051      	b.n	8002774 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_DMA_Abort_IT+0xd4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d029      	beq.n	800274e <HAL_DMA_Abort_IT+0xa2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_DMA_Abort_IT+0xd8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d022      	beq.n	800274a <HAL_DMA_Abort_IT+0x9e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_DMA_Abort_IT+0xdc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01a      	beq.n	8002744 <HAL_DMA_Abort_IT+0x98>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_DMA_Abort_IT+0xe0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d012      	beq.n	800273e <HAL_DMA_Abort_IT+0x92>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_DMA_Abort_IT+0xe4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00a      	beq.n	8002738 <HAL_DMA_Abort_IT+0x8c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_DMA_Abort_IT+0xe8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <HAL_DMA_Abort_IT+0x86>
 800272c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002730:	e00e      	b.n	8002750 <HAL_DMA_Abort_IT+0xa4>
 8002732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002736:	e00b      	b.n	8002750 <HAL_DMA_Abort_IT+0xa4>
 8002738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273c:	e008      	b.n	8002750 <HAL_DMA_Abort_IT+0xa4>
 800273e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002742:	e005      	b.n	8002750 <HAL_DMA_Abort_IT+0xa4>
 8002744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002748:	e002      	b.n	8002750 <HAL_DMA_Abort_IT+0xa4>
 800274a:	2310      	movs	r3, #16
 800274c:	e000      	b.n	8002750 <HAL_DMA_Abort_IT+0xa4>
 800274e:	2301      	movs	r3, #1
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_DMA_Abort_IT+0xec>)
 8002752:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
    } 
  }
  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40020008 	.word	0x40020008
 8002784:	4002001c 	.word	0x4002001c
 8002788:	40020030 	.word	0x40020030
 800278c:	40020044 	.word	0x40020044
 8002790:	40020058 	.word	0x40020058
 8002794:	4002006c 	.word	0x4002006c
 8002798:	40020000 	.word	0x40020000

0800279c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800279c:	b480      	push	{r7}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ae:	e169      	b.n	8002a84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027b0:	2201      	movs	r2, #1
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f040 8158 	bne.w	8002a7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a9a      	ldr	r2, [pc, #616]	; (8002a3c <HAL_GPIO_Init+0x2a0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d05e      	beq.n	8002896 <HAL_GPIO_Init+0xfa>
 80027d8:	4a98      	ldr	r2, [pc, #608]	; (8002a3c <HAL_GPIO_Init+0x2a0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d875      	bhi.n	80028ca <HAL_GPIO_Init+0x12e>
 80027de:	4a98      	ldr	r2, [pc, #608]	; (8002a40 <HAL_GPIO_Init+0x2a4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d058      	beq.n	8002896 <HAL_GPIO_Init+0xfa>
 80027e4:	4a96      	ldr	r2, [pc, #600]	; (8002a40 <HAL_GPIO_Init+0x2a4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d86f      	bhi.n	80028ca <HAL_GPIO_Init+0x12e>
 80027ea:	4a96      	ldr	r2, [pc, #600]	; (8002a44 <HAL_GPIO_Init+0x2a8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d052      	beq.n	8002896 <HAL_GPIO_Init+0xfa>
 80027f0:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_GPIO_Init+0x2a8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d869      	bhi.n	80028ca <HAL_GPIO_Init+0x12e>
 80027f6:	4a94      	ldr	r2, [pc, #592]	; (8002a48 <HAL_GPIO_Init+0x2ac>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d04c      	beq.n	8002896 <HAL_GPIO_Init+0xfa>
 80027fc:	4a92      	ldr	r2, [pc, #584]	; (8002a48 <HAL_GPIO_Init+0x2ac>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d863      	bhi.n	80028ca <HAL_GPIO_Init+0x12e>
 8002802:	4a92      	ldr	r2, [pc, #584]	; (8002a4c <HAL_GPIO_Init+0x2b0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d046      	beq.n	8002896 <HAL_GPIO_Init+0xfa>
 8002808:	4a90      	ldr	r2, [pc, #576]	; (8002a4c <HAL_GPIO_Init+0x2b0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d85d      	bhi.n	80028ca <HAL_GPIO_Init+0x12e>
 800280e:	2b12      	cmp	r3, #18
 8002810:	d82a      	bhi.n	8002868 <HAL_GPIO_Init+0xcc>
 8002812:	2b12      	cmp	r3, #18
 8002814:	d859      	bhi.n	80028ca <HAL_GPIO_Init+0x12e>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <HAL_GPIO_Init+0x80>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002897 	.word	0x08002897
 8002820:	08002871 	.word	0x08002871
 8002824:	08002883 	.word	0x08002883
 8002828:	080028c5 	.word	0x080028c5
 800282c:	080028cb 	.word	0x080028cb
 8002830:	080028cb 	.word	0x080028cb
 8002834:	080028cb 	.word	0x080028cb
 8002838:	080028cb 	.word	0x080028cb
 800283c:	080028cb 	.word	0x080028cb
 8002840:	080028cb 	.word	0x080028cb
 8002844:	080028cb 	.word	0x080028cb
 8002848:	080028cb 	.word	0x080028cb
 800284c:	080028cb 	.word	0x080028cb
 8002850:	080028cb 	.word	0x080028cb
 8002854:	080028cb 	.word	0x080028cb
 8002858:	080028cb 	.word	0x080028cb
 800285c:	080028cb 	.word	0x080028cb
 8002860:	08002879 	.word	0x08002879
 8002864:	0800288d 	.word	0x0800288d
 8002868:	4a79      	ldr	r2, [pc, #484]	; (8002a50 <HAL_GPIO_Init+0x2b4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800286e:	e02c      	b.n	80028ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	623b      	str	r3, [r7, #32]
          break;
 8002876:	e029      	b.n	80028cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	3304      	adds	r3, #4
 800287e:	623b      	str	r3, [r7, #32]
          break;
 8002880:	e024      	b.n	80028cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	3308      	adds	r3, #8
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e01f      	b.n	80028cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	330c      	adds	r3, #12
 8002892:	623b      	str	r3, [r7, #32]
          break;
 8002894:	e01a      	b.n	80028cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800289e:	2304      	movs	r3, #4
 80028a0:	623b      	str	r3, [r7, #32]
          break;
 80028a2:	e013      	b.n	80028cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028ac:	2308      	movs	r3, #8
 80028ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	611a      	str	r2, [r3, #16]
          break;
 80028b6:	e009      	b.n	80028cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b8:	2308      	movs	r3, #8
 80028ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	615a      	str	r2, [r3, #20]
          break;
 80028c2:	e003      	b.n	80028cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
          break;
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x130>
          break;
 80028ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2bff      	cmp	r3, #255	; 0xff
 80028d0:	d801      	bhi.n	80028d6 <HAL_GPIO_Init+0x13a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	e001      	b.n	80028da <HAL_GPIO_Init+0x13e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2bff      	cmp	r3, #255	; 0xff
 80028e0:	d802      	bhi.n	80028e8 <HAL_GPIO_Init+0x14c>
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	e002      	b.n	80028ee <HAL_GPIO_Init+0x152>
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3b08      	subs	r3, #8
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	210f      	movs	r1, #15
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	401a      	ands	r2, r3
 8002900:	6a39      	ldr	r1, [r7, #32]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80b1 	beq.w	8002a7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800291c:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <HAL_GPIO_Init+0x2b8>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <HAL_GPIO_Init+0x2b8>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6193      	str	r3, [r2, #24]
 8002928:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_GPIO_Init+0x2b8>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002934:	4a48      	ldr	r2, [pc, #288]	; (8002a58 <HAL_GPIO_Init+0x2bc>)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002940:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a40      	ldr	r2, [pc, #256]	; (8002a5c <HAL_GPIO_Init+0x2c0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d013      	beq.n	8002988 <HAL_GPIO_Init+0x1ec>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3f      	ldr	r2, [pc, #252]	; (8002a60 <HAL_GPIO_Init+0x2c4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00d      	beq.n	8002984 <HAL_GPIO_Init+0x1e8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3e      	ldr	r2, [pc, #248]	; (8002a64 <HAL_GPIO_Init+0x2c8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <HAL_GPIO_Init+0x1e4>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3d      	ldr	r2, [pc, #244]	; (8002a68 <HAL_GPIO_Init+0x2cc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_GPIO_Init+0x1e0>
 8002978:	2303      	movs	r3, #3
 800297a:	e006      	b.n	800298a <HAL_GPIO_Init+0x1ee>
 800297c:	2304      	movs	r3, #4
 800297e:	e004      	b.n	800298a <HAL_GPIO_Init+0x1ee>
 8002980:	2302      	movs	r3, #2
 8002982:	e002      	b.n	800298a <HAL_GPIO_Init+0x1ee>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_GPIO_Init+0x1ee>
 8002988:	2300      	movs	r3, #0
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	f002 0203 	and.w	r2, r2, #3
 8002990:	0092      	lsls	r2, r2, #2
 8002992:	4093      	lsls	r3, r2
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800299a:	492f      	ldr	r1, [pc, #188]	; (8002a58 <HAL_GPIO_Init+0x2bc>)
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	492c      	ldr	r1, [pc, #176]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4928      	ldr	r1, [pc, #160]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4922      	ldr	r1, [pc, #136]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	491e      	ldr	r1, [pc, #120]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d006      	beq.n	8002a12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4918      	ldr	r1, [pc, #96]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	4914      	ldr	r1, [pc, #80]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d021      	beq.n	8002a70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	490e      	ldr	r1, [pc, #56]	; (8002a6c <HAL_GPIO_Init+0x2d0>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e021      	b.n	8002a7e <HAL_GPIO_Init+0x2e2>
 8002a3a:	bf00      	nop
 8002a3c:	10320000 	.word	0x10320000
 8002a40:	10310000 	.word	0x10310000
 8002a44:	10220000 	.word	0x10220000
 8002a48:	10210000 	.word	0x10210000
 8002a4c:	10120000 	.word	0x10120000
 8002a50:	10110000 	.word	0x10110000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40010800 	.word	0x40010800
 8002a60:	40010c00 	.word	0x40010c00
 8002a64:	40011000 	.word	0x40011000
 8002a68:	40011400 	.word	0x40011400
 8002a6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_GPIO_Init+0x304>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	4909      	ldr	r1, [pc, #36]	; (8002aa0 <HAL_GPIO_Init+0x304>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	3301      	adds	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f47f ae8e 	bne.w	80027b0 <HAL_GPIO_Init+0x14>
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	372c      	adds	r7, #44	; 0x2c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e001      	b.n	8002ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	807b      	strh	r3, [r7, #2]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae2:	787b      	ldrb	r3, [r7, #1]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aee:	e003      	b.n	8002af8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	041a      	lsls	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	611a      	str	r2, [r3, #16]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	041a      	lsls	r2, r3, #16
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	400b      	ands	r3, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f806 	bl	8002b64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40010400 	.word	0x40010400

08002b64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e12b      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff f8d6 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f001 f830 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8002be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a81      	ldr	r2, [pc, #516]	; (8002dec <HAL_I2C_Init+0x274>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d807      	bhi.n	8002bfc <HAL_I2C_Init+0x84>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a80      	ldr	r2, [pc, #512]	; (8002df0 <HAL_I2C_Init+0x278>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	bf94      	ite	ls
 8002bf4:	2301      	movls	r3, #1
 8002bf6:	2300      	movhi	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e006      	b.n	8002c0a <HAL_I2C_Init+0x92>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a7d      	ldr	r2, [pc, #500]	; (8002df4 <HAL_I2C_Init+0x27c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0e7      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a78      	ldr	r2, [pc, #480]	; (8002df8 <HAL_I2C_Init+0x280>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a6a      	ldr	r2, [pc, #424]	; (8002dec <HAL_I2C_Init+0x274>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d802      	bhi.n	8002c4c <HAL_I2C_Init+0xd4>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	e009      	b.n	8002c60 <HAL_I2C_Init+0xe8>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a69      	ldr	r2, [pc, #420]	; (8002dfc <HAL_I2C_Init+0x284>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	3301      	adds	r3, #1
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	495c      	ldr	r1, [pc, #368]	; (8002dec <HAL_I2C_Init+0x274>)
 8002c7c:	428b      	cmp	r3, r1
 8002c7e:	d819      	bhi.n	8002cb4 <HAL_I2C_Init+0x13c>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1e59      	subs	r1, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c94:	400b      	ands	r3, r1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_I2C_Init+0x138>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e59      	subs	r1, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cae:	e051      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e04f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <HAL_I2C_Init+0x168>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e58      	subs	r0, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	440b      	add	r3, r1
 8002cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e012      	b.n	8002d06 <HAL_I2C_Init+0x18e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Init+0x196>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e022      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <HAL_I2C_Init+0x1bc>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e58      	subs	r0, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	440b      	add	r3, r1
 8002d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d32:	e00f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	0099      	lsls	r1, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6809      	ldr	r1, [r1, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6911      	ldr	r1, [r2, #16]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	4311      	orrs	r1, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	000186a0 	.word	0x000186a0
 8002df0:	001e847f 	.word	0x001e847f
 8002df4:	003d08ff 	.word	0x003d08ff
 8002df8:	431bde83 	.word	0x431bde83
 8002dfc:	10624dd3 	.word	0x10624dd3

08002e00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
 8002e10:	4613      	mov	r3, r2
 8002e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff fad4 	bl	80023c0 <HAL_GetTick>
 8002e18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	f040 80e0 	bne.w	8002fe8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2319      	movs	r3, #25
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4970      	ldr	r1, [pc, #448]	; (8002ff4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f964 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0d3      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x50>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e0cc      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d007      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	; 0x21
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2210      	movs	r2, #16
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	; (8002ff8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f89c 	bl	8002ffc <I2C_MasterRequestWrite>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e08d      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ee4:	e066      	b.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fa22 	bl	8003334 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d11b      	bne.n	8002f88 <HAL_I2C_Master_Transmit+0x188>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	6a39      	ldr	r1, [r7, #32]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa19 	bl	80033c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e01a      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d194      	bne.n	8002ee6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	00100002 	.word	0x00100002
 8002ff8:	ffff0000 	.word	0xffff0000

08002ffc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	460b      	mov	r3, r1
 800300a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d006      	beq.n	8003026 <I2C_MasterRequestWrite+0x2a>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d003      	beq.n	8003026 <I2C_MasterRequestWrite+0x2a>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003024:	d108      	bne.n	8003038 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e00b      	b.n	8003050 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	2b12      	cmp	r3, #18
 800303e:	d107      	bne.n	8003050 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f84f 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00d      	beq.n	8003084 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003076:	d103      	bne.n	8003080 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e035      	b.n	80030f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308c:	d108      	bne.n	80030a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e01b      	b.n	80030d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	11db      	asrs	r3, r3, #7
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0306 	and.w	r3, r3, #6
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f063 030f 	orn	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <I2C_MasterRequestWrite+0xfc>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f898 	bl	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e010      	b.n	80030f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <I2C_MasterRequestWrite+0x100>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f888 	bl	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	00010008 	.word	0x00010008
 80030fc:	00010002 	.word	0x00010002

08003100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003110:	e048      	b.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d044      	beq.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7ff f951 	bl	80023c0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d139      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10d      	bne.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x56>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	e00c      	b.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	429a      	cmp	r2, r3
 8003174:	d116      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e023      	b.n	80031ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d10d      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	e00c      	b.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	43da      	mvns	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d093      	beq.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003202:	e071      	b.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d123      	bne.n	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0204 	orr.w	r2, r3, #4
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e067      	b.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d041      	beq.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7ff f8ac 	bl	80023c0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d136      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10c      	bne.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e00b      	b.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e021      	b.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10c      	bne.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e00b      	b.n	8003324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f af6d 	bne.w	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003340:	e034      	b.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f886 	bl	8003454 <I2C_IsAcknowledgeFailed>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e034      	b.n	80033bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d028      	beq.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7ff f831 	bl	80023c0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d11d      	bne.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b80      	cmp	r3, #128	; 0x80
 800337c:	d016      	beq.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e007      	b.n	80033bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d1c3      	bne.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d0:	e034      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f83e 	bl	8003454 <I2C_IsAcknowledgeFailed>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e034      	b.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d028      	beq.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7fe ffe9 	bl	80023c0 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11d      	bne.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d016      	beq.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b04      	cmp	r3, #4
 8003448:	d1c3      	bne.n	80033d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346a:	d11b      	bne.n	80034a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0204 	orr.w	r2, r3, #4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e26c      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8087 	beq.w	80035de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d00c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034dc:	4b8f      	ldr	r3, [pc, #572]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d112      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
 80034e8:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d10b      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f6:	4b89      	ldr	r3, [pc, #548]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d06c      	beq.n	80035dc <HAL_RCC_OscConfig+0x12c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d168      	bne.n	80035dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e246      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x76>
 8003518:	4b80      	ldr	r3, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7f      	ldr	r2, [pc, #508]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e02e      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b7b      	ldr	r3, [pc, #492]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7a      	ldr	r2, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b78      	ldr	r3, [pc, #480]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a77      	ldr	r2, [pc, #476]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e01d      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0xbc>
 8003552:	4b72      	ldr	r3, [pc, #456]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a71      	ldr	r2, [pc, #452]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6e      	ldr	r2, [pc, #440]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 800356c:	4b6b      	ldr	r3, [pc, #428]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6a      	ldr	r2, [pc, #424]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b68      	ldr	r3, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a67      	ldr	r2, [pc, #412]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe ff18 	bl	80023c0 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe ff14 	bl	80023c0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1fa      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0xe4>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe ff04 	bl	80023c0 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe ff00 	bl	80023c0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1e6      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x10c>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d063      	beq.n	80036b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ea:	4b4c      	ldr	r3, [pc, #304]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x18c>
 8003602:	4b46      	ldr	r3, [pc, #280]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x176>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1ba      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4939      	ldr	r1, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x270>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe feb9 	bl	80023c0 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003652:	f7fe feb5 	bl	80023c0 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e19b      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4927      	ldr	r1, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_RCC_OscConfig+0x270>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe fe98 	bl	80023c0 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe fe94 	bl	80023c0 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e17a      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d03a      	beq.n	8003734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d019      	beq.n	80036fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fe78 	bl	80023c0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe fe74 	bl	80023c0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e15a      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f000 facc 	bl	8003c90 <RCC_Delay>
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe fe5e 	bl	80023c0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003706:	e00f      	b.n	8003728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe fe5a 	bl	80023c0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d908      	bls.n	8003728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e140      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	42420000 	.word	0x42420000
 8003724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e9      	bne.n	8003708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a6 	beq.w	800388e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b97      	ldr	r3, [pc, #604]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b94      	ldr	r3, [pc, #592]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4a93      	ldr	r2, [pc, #588]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	61d3      	str	r3, [r2, #28]
 800375e:	4b91      	ldr	r3, [pc, #580]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b8e      	ldr	r3, [pc, #568]	; (80039a8 <HAL_RCC_OscConfig+0x4f8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x4f8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a8a      	ldr	r2, [pc, #552]	; (80039a8 <HAL_RCC_OscConfig+0x4f8>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe fe1b 	bl	80023c0 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7fe fe17 	bl	80023c0 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	; 0x64
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0fd      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x312>
 80037b4:	4b7b      	ldr	r3, [pc, #492]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4a7a      	ldr	r2, [pc, #488]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6213      	str	r3, [r2, #32]
 80037c0:	e02d      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x334>
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	4b73      	ldr	r3, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a72      	ldr	r2, [pc, #456]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6213      	str	r3, [r2, #32]
 80037e2:	e01c      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x356>
 80037ec:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a6c      	ldr	r2, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a69      	ldr	r2, [pc, #420]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	e00b      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a66      	ldr	r2, [pc, #408]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6213      	str	r3, [r2, #32]
 8003812:	4b64      	ldr	r3, [pc, #400]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a63      	ldr	r2, [pc, #396]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d015      	beq.n	8003852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe fdcb 	bl	80023c0 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fdc7 	bl	80023c0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0ab      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ee      	beq.n	800382e <HAL_RCC_OscConfig+0x37e>
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7fe fdb5 	bl	80023c0 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fe fdb1 	bl	80023c0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e095      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003870:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ee      	bne.n	800385a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b48      	ldr	r3, [pc, #288]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a47      	ldr	r2, [pc, #284]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8081 	beq.w	800399a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003898:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d061      	beq.n	8003968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d146      	bne.n	800393a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ac:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_OscConfig+0x4fc>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fe fd85 	bl	80023c0 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe fd81 	bl	80023c0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e067      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d108      	bne.n	80038f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	492d      	ldr	r1, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a19      	ldr	r1, [r3, #32]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	430b      	orrs	r3, r1
 8003906:	4927      	ldr	r1, [pc, #156]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b27      	ldr	r3, [pc, #156]	; (80039ac <HAL_RCC_OscConfig+0x4fc>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fd55 	bl	80023c0 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe fd51 	bl	80023c0 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e037      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x46a>
 8003938:	e02f      	b.n	800399a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_RCC_OscConfig+0x4fc>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fd3e 	bl	80023c0 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fd3a 	bl	80023c0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e020      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x498>
 8003966:	e018      	b.n	800399a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e013      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_OscConfig+0x4f4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	429a      	cmp	r2, r3
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40007000 	.word	0x40007000
 80039ac:	42420060 	.word	0x42420060

080039b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0d0      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d910      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4965      	ldr	r1, [pc, #404]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b8      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	494d      	ldr	r1, [pc, #308]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d040      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d115      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e073      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06b      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4936      	ldr	r1, [pc, #216]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe fc8e 	bl	80023c0 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fe fc8a 	bl	80023c0 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e053      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d210      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0207 	bic.w	r2, r3, #7
 8003ae6:	4922      	ldr	r1, [pc, #136]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4916      	ldr	r1, [pc, #88]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b3e:	f000 f821 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	490a      	ldr	r1, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	5ccb      	ldrb	r3, [r1, r3]
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1cc>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1d0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fbec 	bl	800233c <HAL_InitTick>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40022000 	.word	0x40022000
 8003b74:	40021000 	.word	0x40021000
 8003b78:	08005ba4 	.word	0x08005ba4
 8003b7c:	20000058 	.word	0x20000058
 8003b80:	2000005c 	.word	0x2000005c

08003b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d003      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x36>
 8003bb2:	e027      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003bb6:	613b      	str	r3, [r7, #16]
      break;
 8003bb8:	e027      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	0c9b      	lsrs	r3, r3, #18
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc4:	5cd3      	ldrb	r3, [r2, r3]
 8003bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	0c5b      	lsrs	r3, r3, #17
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003be6:	fb02 f203 	mul.w	r2, r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e004      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	613b      	str	r3, [r7, #16]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c06:	613b      	str	r3, [r7, #16]
      break;
 8003c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0a:	693b      	ldr	r3, [r7, #16]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	007a1200 	.word	0x007a1200
 8003c20:	08005bbc 	.word	0x08005bbc
 8003c24:	08005bcc 	.word	0x08005bcc
 8003c28:	003d0900 	.word	0x003d0900

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	20000058 	.word	0x20000058

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c44:	f7ff fff2 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	08005bb4 	.word	0x08005bb4

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c6c:	f7ff ffde 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	0adb      	lsrs	r3, r3, #11
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	08005bb4 	.word	0x08005bb4

08003c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <RCC_Delay+0x34>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <RCC_Delay+0x38>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0a5b      	lsrs	r3, r3, #9
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cac:	bf00      	nop
  }
  while (Delay --);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	60fa      	str	r2, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f9      	bne.n	8003cac <RCC_Delay+0x1c>
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	20000058 	.word	0x20000058
 8003cc8:	10624dd3 	.word	0x10624dd3

08003ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e041      	b.n	8003d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fe f87c 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f000 fa5c 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d001      	beq.n	8003d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e03a      	b.n	8003dfa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <HAL_TIM_Base_Start_IT+0x98>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x58>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dae:	d009      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x58>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <HAL_TIM_Base_Start_IT+0x9c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x58>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <HAL_TIM_Base_Start_IT+0xa0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d010      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de6:	e007      	b.n	8003df8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800

08003e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d020      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0202 	mvn.w	r2, #2
 8003e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f998 	bl	8004190 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f98b 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f99a 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d020      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0204 	mvn.w	r2, #4
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f972 	bl	8004190 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f965 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f974 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d020      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01b      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0208 	mvn.w	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f94c 	bl	8004190 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f93f 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f94e 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d020      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01b      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0210 	mvn.w	r2, #16
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f926 	bl	8004190 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f919 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f928 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0201 	mvn.w	r2, #1
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd fd0e 	bl	8001998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa7f 	bl	800449e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8f8 	bl	80041b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0220 	mvn.w	r2, #32
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa52 	bl	800448c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x1c>
 8004008:	2302      	movs	r3, #2
 800400a:	e0b4      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x186>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004044:	d03e      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404a:	f200 8087 	bhi.w	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	f000 8086 	beq.w	8004162 <HAL_TIM_ConfigClockSource+0x172>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d87f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b70      	cmp	r3, #112	; 0x70
 800405e:	d01a      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xa6>
 8004060:	2b70      	cmp	r3, #112	; 0x70
 8004062:	d87b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b60      	cmp	r3, #96	; 0x60
 8004066:	d050      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x11a>
 8004068:	2b60      	cmp	r3, #96	; 0x60
 800406a:	d877      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b50      	cmp	r3, #80	; 0x50
 800406e:	d03c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xfa>
 8004070:	2b50      	cmp	r3, #80	; 0x50
 8004072:	d873      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d058      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x13a>
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d86f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b30      	cmp	r3, #48	; 0x30
 800407e:	d064      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b30      	cmp	r3, #48	; 0x30
 8004082:	d86b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d060      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d867      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b10      	cmp	r3, #16
 8004092:	d05a      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	e062      	b.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f000 f974 	bl	8004392 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e04f      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f000 f95d 	bl	8004392 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e6:	609a      	str	r2, [r3, #8]
      break;
 80040e8:	e03c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 f8d4 	bl	80042a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2150      	movs	r1, #80	; 0x50
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f92b 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8004108:	e02c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	f000 f8f2 	bl	8004300 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2160      	movs	r1, #96	; 0x60
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f91b 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8004128:	e01c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	461a      	mov	r2, r3
 8004138:	f000 f8b4 	bl	80042a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2140      	movs	r1, #64	; 0x40
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f90b 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8004148:	e00c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 f902 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 800415a:	e003      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e000      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
	...

080041c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <TIM_Base_SetConfig+0xd0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x30>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x30>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a2c      	ldr	r2, [pc, #176]	; (800429c <TIM_Base_SetConfig+0xd4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x30>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <TIM_Base_SetConfig+0xd8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <TIM_Base_SetConfig+0xd0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00b      	beq.n	800422a <TIM_Base_SetConfig+0x62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d007      	beq.n	800422a <TIM_Base_SetConfig+0x62>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <TIM_Base_SetConfig+0xd4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_Base_SetConfig+0x62>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <TIM_Base_SetConfig+0xd8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d108      	bne.n	800423c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <TIM_Base_SetConfig+0xd0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d103      	bne.n	8004270 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	611a      	str	r2, [r3, #16]
  }
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800

080042a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 030a 	bic.w	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800433c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	f043 0307 	orr.w	r3, r3, #7
 8004380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	609a      	str	r2, [r3, #8]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e046      	b.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004434:	d009      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a10      	ldr	r2, [pc, #64]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10c      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4313      	orrs	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800

0800448c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e042      	b.n	8004548 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fcae 	bl	8001e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fdb7 	bl	8005068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b20      	cmp	r3, #32
 800456e:	d175      	bne.n	800465c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_UART_Transmit+0x2c>
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e06e      	b.n	800465e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2221      	movs	r2, #33	; 0x21
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800458e:	f7fd ff17 	bl	80023c0 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a8:	d108      	bne.n	80045bc <HAL_UART_Transmit+0x6c>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e003      	b.n	80045c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045c4:	e02e      	b.n	8004624 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fb1c 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e03a      	b.n	800465e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	3302      	adds	r3, #2
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e007      	b.n	8004616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	3301      	adds	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cb      	bne.n	80045c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fae8 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	4613      	mov	r3, r2
 8004672:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b20      	cmp	r3, #32
 800467e:	d112      	bne.n	80046a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_UART_Receive_IT+0x26>
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e00b      	b.n	80046a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	461a      	mov	r2, r3
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fb0f 	bl	8004cc0 <UART_Start_Receive_IT>
 80046a2:	4603      	mov	r3, r0
 80046a4:	e000      	b.n	80046a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b0ba      	sub	sp, #232	; 0xe8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046dc:	2300      	movs	r3, #0
 80046de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_UART_IRQHandler+0x66>
 8004702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fbec 	bl	8004eec <UART_Receive_IT>
      return;
 8004714:	e25b      	b.n	8004bce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80de 	beq.w	80048dc <HAL_UART_IRQHandler+0x22c>
 8004720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80d1 	beq.w	80048dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_UART_IRQHandler+0xae>
 8004746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f043 0201 	orr.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <HAL_UART_IRQHandler+0xd2>
 800476a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f043 0202 	orr.w	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_UART_IRQHandler+0xf6>
 800478e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f043 0204 	orr.w	r2, r3, #4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d011      	beq.n	80047d6 <HAL_UART_IRQHandler+0x126>
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d105      	bne.n	80047ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f043 0208 	orr.w	r2, r3, #8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 81f2 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_UART_IRQHandler+0x14e>
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fb77 	bl	8004eec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d103      	bne.n	800482a <HAL_UART_IRQHandler+0x17a>
 8004822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d04f      	beq.n	80048ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa81 	bl	8004d32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d041      	beq.n	80048c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3314      	adds	r3, #20
 8004844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3314      	adds	r3, #20
 8004866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800486a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800486e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1d9      	bne.n	800483e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d013      	beq.n	80048ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	4a7e      	ldr	r2, [pc, #504]	; (8004a90 <HAL_UART_IRQHandler+0x3e0>)
 8004898:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd ff04 	bl	80026ac <HAL_DMA_Abort_IT>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048b4:	4610      	mov	r0, r2
 80048b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	e00e      	b.n	80048d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f993 	bl	8004be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	e00a      	b.n	80048d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f98f 	bl	8004be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e006      	b.n	80048d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f98b 	bl	8004be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80048d6:	e175      	b.n	8004bc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	bf00      	nop
    return;
 80048da:	e173      	b.n	8004bc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	f040 814f 	bne.w	8004b84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8148 	beq.w	8004b84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8141 	beq.w	8004b84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80b6 	beq.w	8004a94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8145 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004946:	429a      	cmp	r2, r3
 8004948:	f080 813e 	bcs.w	8004bc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004952:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b20      	cmp	r3, #32
 800495c:	f000 8088 	beq.w	8004a70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800497a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800497e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800498c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004998:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1d9      	bne.n	8004960 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e1      	bne.n	80049ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3314      	adds	r3, #20
 8004a08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e3      	bne.n	80049e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a40:	f023 0310 	bic.w	r3, r3, #16
 8004a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a52:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e3      	bne.n	8004a2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fde3 	bl	8002636 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8b6 	bl	8004bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a8c:	e09c      	b.n	8004bc8 <HAL_UART_IRQHandler+0x518>
 8004a8e:	bf00      	nop
 8004a90:	08004df7 	.word	0x08004df7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 808e 	beq.w	8004bcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8089 	beq.w	8004bcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ade:	647a      	str	r2, [r7, #68]	; 0x44
 8004ae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e3      	bne.n	8004aba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	623b      	str	r3, [r7, #32]
   return(result);
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b16:	633a      	str	r2, [r7, #48]	; 0x30
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e3      	bne.n	8004af2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b5c:	61fa      	str	r2, [r7, #28]
 8004b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	69b9      	ldr	r1, [r7, #24]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e3      	bne.n	8004b38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f83b 	bl	8004bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b82:	e023      	b.n	8004bcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x4f4>
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f93e 	bl	8004e1e <UART_Transmit_IT>
    return;
 8004ba2:	e014      	b.n	8004bce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <HAL_UART_IRQHandler+0x51e>
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f97d 	bl	8004ebc <UART_EndTransmit_IT>
    return;
 8004bc2:	e004      	b.n	8004bce <HAL_UART_IRQHandler+0x51e>
    return;
 8004bc4:	bf00      	nop
 8004bc6:	e002      	b.n	8004bce <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <HAL_UART_IRQHandler+0x51e>
      return;
 8004bcc:	bf00      	nop
  }
}
 8004bce:	37e8      	adds	r7, #232	; 0xe8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	e03b      	b.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d037      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c28:	f7fd fbca 	bl	80023c0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e03a      	b.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d023      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d020      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d01d      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d116      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f856 	bl	8004d32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e00f      	b.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d0b4      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2222      	movs	r2, #34	; 0x22
 8004cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0220 	orr.w	r2, r2, #32
 8004d24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr

08004d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b095      	sub	sp, #84	; 0x54
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d5a:	643a      	str	r2, [r7, #64]	; 0x40
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e5      	bne.n	8004d3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3314      	adds	r3, #20
 8004d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e5      	bne.n	8004d6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d119      	bne.n	8004dde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f023 0310 	bic.w	r3, r3, #16
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dca:	61ba      	str	r2, [r7, #24]
 8004dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e5      	bne.n	8004daa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dec:	bf00      	nop
 8004dee:	3754      	adds	r7, #84	; 0x54
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr

08004df6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff fee8 	bl	8004be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b21      	cmp	r3, #33	; 0x21
 8004e30:	d13e      	bne.n	8004eb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3a:	d114      	bne.n	8004e66 <UART_Transmit_IT+0x48>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d110      	bne.n	8004e66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	621a      	str	r2, [r3, #32]
 8004e64:	e008      	b.n	8004e78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	1c59      	adds	r1, r3, #1
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6211      	str	r1, [r2, #32]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4619      	mov	r1, r3
 8004e86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10f      	bne.n	8004eac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fe79 	bl	8004bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	; 0x30
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b22      	cmp	r3, #34	; 0x22
 8004efe:	f040 80ae 	bne.w	800505e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	d117      	bne.n	8004f3c <UART_Receive_IT+0x50>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d113      	bne.n	8004f3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	629a      	str	r2, [r3, #40]	; 0x28
 8004f3a:	e026      	b.n	8004f8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4e:	d007      	beq.n	8004f60 <UART_Receive_IT+0x74>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <UART_Receive_IT+0x82>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e008      	b.n	8004f80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4619      	mov	r1, r3
 8004f98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d15d      	bne.n	800505a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0220 	bic.w	r2, r2, #32
 8004fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d135      	bne.n	8005050 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	623a      	str	r2, [r7, #32]
 800500c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	61bb      	str	r3, [r7, #24]
   return(result);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e5      	bne.n	8004fea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b10      	cmp	r3, #16
 800502a:	d10a      	bne.n	8005042 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fdd5 	bl	8004bf8 <HAL_UARTEx_RxEventCallback>
 800504e:	e002      	b.n	8005056 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fc fa57 	bl	8001504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	e002      	b.n	8005060 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800505e:	2302      	movs	r3, #2
  }
}
 8005060:	4618      	mov	r0, r3
 8005062:	3730      	adds	r7, #48	; 0x30
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050a2:	f023 030c 	bic.w	r3, r3, #12
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	430b      	orrs	r3, r1
 80050ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2c      	ldr	r2, [pc, #176]	; (800517c <UART_SetConfig+0x114>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d103      	bne.n	80050d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050d0:	f7fe fdca 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	e002      	b.n	80050de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe fdb2 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 80050dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009a      	lsls	r2, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a22      	ldr	r2, [pc, #136]	; (8005180 <UART_SetConfig+0x118>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	0119      	lsls	r1, r3, #4
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009a      	lsls	r2, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	fbb2 f2f3 	udiv	r2, r2, r3
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <UART_SetConfig+0x118>)
 8005116:	fba3 0302 	umull	r0, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	2064      	movs	r0, #100	; 0x64
 800511e:	fb00 f303 	mul.w	r3, r0, r3
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	3332      	adds	r3, #50	; 0x32
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <UART_SetConfig+0x118>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005134:	4419      	add	r1, r3
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009a      	lsls	r2, r3, #2
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	fbb2 f2f3 	udiv	r2, r2, r3
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <UART_SetConfig+0x118>)
 800514e:	fba3 0302 	umull	r0, r3, r3, r2
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	2064      	movs	r0, #100	; 0x64
 8005156:	fb00 f303 	mul.w	r3, r0, r3
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	3332      	adds	r3, #50	; 0x32
 8005160:	4a07      	ldr	r2, [pc, #28]	; (8005180 <UART_SetConfig+0x118>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	f003 020f 	and.w	r2, r3, #15
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	440a      	add	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40013800 	.word	0x40013800
 8005180:	51eb851f 	.word	0x51eb851f

08005184 <__errno>:
 8005184:	4b01      	ldr	r3, [pc, #4]	; (800518c <__errno+0x8>)
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000064 	.word	0x20000064

08005190 <__libc_init_array>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	2600      	movs	r6, #0
 8005194:	4d0c      	ldr	r5, [pc, #48]	; (80051c8 <__libc_init_array+0x38>)
 8005196:	4c0d      	ldr	r4, [pc, #52]	; (80051cc <__libc_init_array+0x3c>)
 8005198:	1b64      	subs	r4, r4, r5
 800519a:	10a4      	asrs	r4, r4, #2
 800519c:	42a6      	cmp	r6, r4
 800519e:	d109      	bne.n	80051b4 <__libc_init_array+0x24>
 80051a0:	f000 fc5c 	bl	8005a5c <_init>
 80051a4:	2600      	movs	r6, #0
 80051a6:	4d0a      	ldr	r5, [pc, #40]	; (80051d0 <__libc_init_array+0x40>)
 80051a8:	4c0a      	ldr	r4, [pc, #40]	; (80051d4 <__libc_init_array+0x44>)
 80051aa:	1b64      	subs	r4, r4, r5
 80051ac:	10a4      	asrs	r4, r4, #2
 80051ae:	42a6      	cmp	r6, r4
 80051b0:	d105      	bne.n	80051be <__libc_init_array+0x2e>
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b8:	4798      	blx	r3
 80051ba:	3601      	adds	r6, #1
 80051bc:	e7ee      	b.n	800519c <__libc_init_array+0xc>
 80051be:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c2:	4798      	blx	r3
 80051c4:	3601      	adds	r6, #1
 80051c6:	e7f2      	b.n	80051ae <__libc_init_array+0x1e>
 80051c8:	08005c04 	.word	0x08005c04
 80051cc:	08005c04 	.word	0x08005c04
 80051d0:	08005c04 	.word	0x08005c04
 80051d4:	08005c08 	.word	0x08005c08

080051d8 <memset>:
 80051d8:	4603      	mov	r3, r0
 80051da:	4402      	add	r2, r0
 80051dc:	4293      	cmp	r3, r2
 80051de:	d100      	bne.n	80051e2 <memset+0xa>
 80051e0:	4770      	bx	lr
 80051e2:	f803 1b01 	strb.w	r1, [r3], #1
 80051e6:	e7f9      	b.n	80051dc <memset+0x4>

080051e8 <_free_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4605      	mov	r5, r0
 80051ec:	2900      	cmp	r1, #0
 80051ee:	d043      	beq.n	8005278 <_free_r+0x90>
 80051f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f4:	1f0c      	subs	r4, r1, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bfb8      	it	lt
 80051fa:	18e4      	addlt	r4, r4, r3
 80051fc:	f000 f8ca 	bl	8005394 <__malloc_lock>
 8005200:	4a1e      	ldr	r2, [pc, #120]	; (800527c <_free_r+0x94>)
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	4610      	mov	r0, r2
 8005206:	b933      	cbnz	r3, 8005216 <_free_r+0x2e>
 8005208:	6063      	str	r3, [r4, #4]
 800520a:	6014      	str	r4, [r2, #0]
 800520c:	4628      	mov	r0, r5
 800520e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005212:	f000 b8c5 	b.w	80053a0 <__malloc_unlock>
 8005216:	42a3      	cmp	r3, r4
 8005218:	d90a      	bls.n	8005230 <_free_r+0x48>
 800521a:	6821      	ldr	r1, [r4, #0]
 800521c:	1862      	adds	r2, r4, r1
 800521e:	4293      	cmp	r3, r2
 8005220:	bf01      	itttt	eq
 8005222:	681a      	ldreq	r2, [r3, #0]
 8005224:	685b      	ldreq	r3, [r3, #4]
 8005226:	1852      	addeq	r2, r2, r1
 8005228:	6022      	streq	r2, [r4, #0]
 800522a:	6063      	str	r3, [r4, #4]
 800522c:	6004      	str	r4, [r0, #0]
 800522e:	e7ed      	b.n	800520c <_free_r+0x24>
 8005230:	461a      	mov	r2, r3
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b10b      	cbz	r3, 800523a <_free_r+0x52>
 8005236:	42a3      	cmp	r3, r4
 8005238:	d9fa      	bls.n	8005230 <_free_r+0x48>
 800523a:	6811      	ldr	r1, [r2, #0]
 800523c:	1850      	adds	r0, r2, r1
 800523e:	42a0      	cmp	r0, r4
 8005240:	d10b      	bne.n	800525a <_free_r+0x72>
 8005242:	6820      	ldr	r0, [r4, #0]
 8005244:	4401      	add	r1, r0
 8005246:	1850      	adds	r0, r2, r1
 8005248:	4283      	cmp	r3, r0
 800524a:	6011      	str	r1, [r2, #0]
 800524c:	d1de      	bne.n	800520c <_free_r+0x24>
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4401      	add	r1, r0
 8005254:	6011      	str	r1, [r2, #0]
 8005256:	6053      	str	r3, [r2, #4]
 8005258:	e7d8      	b.n	800520c <_free_r+0x24>
 800525a:	d902      	bls.n	8005262 <_free_r+0x7a>
 800525c:	230c      	movs	r3, #12
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	e7d4      	b.n	800520c <_free_r+0x24>
 8005262:	6820      	ldr	r0, [r4, #0]
 8005264:	1821      	adds	r1, r4, r0
 8005266:	428b      	cmp	r3, r1
 8005268:	bf01      	itttt	eq
 800526a:	6819      	ldreq	r1, [r3, #0]
 800526c:	685b      	ldreq	r3, [r3, #4]
 800526e:	1809      	addeq	r1, r1, r0
 8005270:	6021      	streq	r1, [r4, #0]
 8005272:	6063      	str	r3, [r4, #4]
 8005274:	6054      	str	r4, [r2, #4]
 8005276:	e7c9      	b.n	800520c <_free_r+0x24>
 8005278:	bd38      	pop	{r3, r4, r5, pc}
 800527a:	bf00      	nop
 800527c:	20000110 	.word	0x20000110

08005280 <_malloc_r>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	1ccd      	adds	r5, r1, #3
 8005284:	f025 0503 	bic.w	r5, r5, #3
 8005288:	3508      	adds	r5, #8
 800528a:	2d0c      	cmp	r5, #12
 800528c:	bf38      	it	cc
 800528e:	250c      	movcc	r5, #12
 8005290:	2d00      	cmp	r5, #0
 8005292:	4606      	mov	r6, r0
 8005294:	db01      	blt.n	800529a <_malloc_r+0x1a>
 8005296:	42a9      	cmp	r1, r5
 8005298:	d903      	bls.n	80052a2 <_malloc_r+0x22>
 800529a:	230c      	movs	r3, #12
 800529c:	6033      	str	r3, [r6, #0]
 800529e:	2000      	movs	r0, #0
 80052a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a2:	f000 f877 	bl	8005394 <__malloc_lock>
 80052a6:	4921      	ldr	r1, [pc, #132]	; (800532c <_malloc_r+0xac>)
 80052a8:	680a      	ldr	r2, [r1, #0]
 80052aa:	4614      	mov	r4, r2
 80052ac:	b99c      	cbnz	r4, 80052d6 <_malloc_r+0x56>
 80052ae:	4f20      	ldr	r7, [pc, #128]	; (8005330 <_malloc_r+0xb0>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	b923      	cbnz	r3, 80052be <_malloc_r+0x3e>
 80052b4:	4621      	mov	r1, r4
 80052b6:	4630      	mov	r0, r6
 80052b8:	f000 f83c 	bl	8005334 <_sbrk_r>
 80052bc:	6038      	str	r0, [r7, #0]
 80052be:	4629      	mov	r1, r5
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 f837 	bl	8005334 <_sbrk_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d123      	bne.n	8005312 <_malloc_r+0x92>
 80052ca:	230c      	movs	r3, #12
 80052cc:	4630      	mov	r0, r6
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f000 f866 	bl	80053a0 <__malloc_unlock>
 80052d4:	e7e3      	b.n	800529e <_malloc_r+0x1e>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	1b5b      	subs	r3, r3, r5
 80052da:	d417      	bmi.n	800530c <_malloc_r+0x8c>
 80052dc:	2b0b      	cmp	r3, #11
 80052de:	d903      	bls.n	80052e8 <_malloc_r+0x68>
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	441c      	add	r4, r3
 80052e4:	6025      	str	r5, [r4, #0]
 80052e6:	e004      	b.n	80052f2 <_malloc_r+0x72>
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	42a2      	cmp	r2, r4
 80052ec:	bf0c      	ite	eq
 80052ee:	600b      	streq	r3, [r1, #0]
 80052f0:	6053      	strne	r3, [r2, #4]
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f854 	bl	80053a0 <__malloc_unlock>
 80052f8:	f104 000b 	add.w	r0, r4, #11
 80052fc:	1d23      	adds	r3, r4, #4
 80052fe:	f020 0007 	bic.w	r0, r0, #7
 8005302:	1ac2      	subs	r2, r0, r3
 8005304:	d0cc      	beq.n	80052a0 <_malloc_r+0x20>
 8005306:	1a1b      	subs	r3, r3, r0
 8005308:	50a3      	str	r3, [r4, r2]
 800530a:	e7c9      	b.n	80052a0 <_malloc_r+0x20>
 800530c:	4622      	mov	r2, r4
 800530e:	6864      	ldr	r4, [r4, #4]
 8005310:	e7cc      	b.n	80052ac <_malloc_r+0x2c>
 8005312:	1cc4      	adds	r4, r0, #3
 8005314:	f024 0403 	bic.w	r4, r4, #3
 8005318:	42a0      	cmp	r0, r4
 800531a:	d0e3      	beq.n	80052e4 <_malloc_r+0x64>
 800531c:	1a21      	subs	r1, r4, r0
 800531e:	4630      	mov	r0, r6
 8005320:	f000 f808 	bl	8005334 <_sbrk_r>
 8005324:	3001      	adds	r0, #1
 8005326:	d1dd      	bne.n	80052e4 <_malloc_r+0x64>
 8005328:	e7cf      	b.n	80052ca <_malloc_r+0x4a>
 800532a:	bf00      	nop
 800532c:	20000110 	.word	0x20000110
 8005330:	20000114 	.word	0x20000114

08005334 <_sbrk_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	2300      	movs	r3, #0
 8005338:	4d05      	ldr	r5, [pc, #20]	; (8005350 <_sbrk_r+0x1c>)
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fc fe04 	bl	8001f4c <_sbrk>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_sbrk_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_sbrk_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	2000036c 	.word	0x2000036c

08005354 <siprintf>:
 8005354:	b40e      	push	{r1, r2, r3}
 8005356:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800535a:	b500      	push	{lr}
 800535c:	b09c      	sub	sp, #112	; 0x70
 800535e:	ab1d      	add	r3, sp, #116	; 0x74
 8005360:	9002      	str	r0, [sp, #8]
 8005362:	9006      	str	r0, [sp, #24]
 8005364:	9107      	str	r1, [sp, #28]
 8005366:	9104      	str	r1, [sp, #16]
 8005368:	4808      	ldr	r0, [pc, #32]	; (800538c <siprintf+0x38>)
 800536a:	4909      	ldr	r1, [pc, #36]	; (8005390 <siprintf+0x3c>)
 800536c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005370:	9105      	str	r1, [sp, #20]
 8005372:	6800      	ldr	r0, [r0, #0]
 8005374:	a902      	add	r1, sp, #8
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f000 f874 	bl	8005464 <_svfiprintf_r>
 800537c:	2200      	movs	r2, #0
 800537e:	9b02      	ldr	r3, [sp, #8]
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	b01c      	add	sp, #112	; 0x70
 8005384:	f85d eb04 	ldr.w	lr, [sp], #4
 8005388:	b003      	add	sp, #12
 800538a:	4770      	bx	lr
 800538c:	20000064 	.word	0x20000064
 8005390:	ffff0208 	.word	0xffff0208

08005394 <__malloc_lock>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__malloc_lock+0x8>)
 8005396:	f000 bafb 	b.w	8005990 <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	20000374 	.word	0x20000374

080053a0 <__malloc_unlock>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__malloc_unlock+0x8>)
 80053a2:	f000 baf6 	b.w	8005992 <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	20000374 	.word	0x20000374

080053ac <__ssputs_r>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	688e      	ldr	r6, [r1, #8]
 80053b2:	4682      	mov	sl, r0
 80053b4:	429e      	cmp	r6, r3
 80053b6:	460c      	mov	r4, r1
 80053b8:	4690      	mov	r8, r2
 80053ba:	461f      	mov	r7, r3
 80053bc:	d838      	bhi.n	8005430 <__ssputs_r+0x84>
 80053be:	898a      	ldrh	r2, [r1, #12]
 80053c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053c4:	d032      	beq.n	800542c <__ssputs_r+0x80>
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	6909      	ldr	r1, [r1, #16]
 80053ca:	3301      	adds	r3, #1
 80053cc:	eba5 0901 	sub.w	r9, r5, r1
 80053d0:	6965      	ldr	r5, [r4, #20]
 80053d2:	444b      	add	r3, r9
 80053d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053dc:	106d      	asrs	r5, r5, #1
 80053de:	429d      	cmp	r5, r3
 80053e0:	bf38      	it	cc
 80053e2:	461d      	movcc	r5, r3
 80053e4:	0553      	lsls	r3, r2, #21
 80053e6:	d531      	bpl.n	800544c <__ssputs_r+0xa0>
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7ff ff49 	bl	8005280 <_malloc_r>
 80053ee:	4606      	mov	r6, r0
 80053f0:	b950      	cbnz	r0, 8005408 <__ssputs_r+0x5c>
 80053f2:	230c      	movs	r3, #12
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	f8ca 3000 	str.w	r3, [sl]
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005408:	464a      	mov	r2, r9
 800540a:	6921      	ldr	r1, [r4, #16]
 800540c:	f000 fad0 	bl	80059b0 <memcpy>
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	6126      	str	r6, [r4, #16]
 800541e:	444e      	add	r6, r9
 8005420:	6026      	str	r6, [r4, #0]
 8005422:	463e      	mov	r6, r7
 8005424:	6165      	str	r5, [r4, #20]
 8005426:	eba5 0509 	sub.w	r5, r5, r9
 800542a:	60a5      	str	r5, [r4, #8]
 800542c:	42be      	cmp	r6, r7
 800542e:	d900      	bls.n	8005432 <__ssputs_r+0x86>
 8005430:	463e      	mov	r6, r7
 8005432:	4632      	mov	r2, r6
 8005434:	4641      	mov	r1, r8
 8005436:	6820      	ldr	r0, [r4, #0]
 8005438:	f000 fac8 	bl	80059cc <memmove>
 800543c:	68a3      	ldr	r3, [r4, #8]
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	1b9b      	subs	r3, r3, r6
 8005442:	4432      	add	r2, r6
 8005444:	2000      	movs	r0, #0
 8005446:	60a3      	str	r3, [r4, #8]
 8005448:	6022      	str	r2, [r4, #0]
 800544a:	e7db      	b.n	8005404 <__ssputs_r+0x58>
 800544c:	462a      	mov	r2, r5
 800544e:	f000 fad7 	bl	8005a00 <_realloc_r>
 8005452:	4606      	mov	r6, r0
 8005454:	2800      	cmp	r0, #0
 8005456:	d1e1      	bne.n	800541c <__ssputs_r+0x70>
 8005458:	4650      	mov	r0, sl
 800545a:	6921      	ldr	r1, [r4, #16]
 800545c:	f7ff fec4 	bl	80051e8 <_free_r>
 8005460:	e7c7      	b.n	80053f2 <__ssputs_r+0x46>
	...

08005464 <_svfiprintf_r>:
 8005464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005468:	4698      	mov	r8, r3
 800546a:	898b      	ldrh	r3, [r1, #12]
 800546c:	4607      	mov	r7, r0
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	460d      	mov	r5, r1
 8005472:	4614      	mov	r4, r2
 8005474:	b09d      	sub	sp, #116	; 0x74
 8005476:	d50e      	bpl.n	8005496 <_svfiprintf_r+0x32>
 8005478:	690b      	ldr	r3, [r1, #16]
 800547a:	b963      	cbnz	r3, 8005496 <_svfiprintf_r+0x32>
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	f7ff feff 	bl	8005280 <_malloc_r>
 8005482:	6028      	str	r0, [r5, #0]
 8005484:	6128      	str	r0, [r5, #16]
 8005486:	b920      	cbnz	r0, 8005492 <_svfiprintf_r+0x2e>
 8005488:	230c      	movs	r3, #12
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	e0d1      	b.n	8005636 <_svfiprintf_r+0x1d2>
 8005492:	2340      	movs	r3, #64	; 0x40
 8005494:	616b      	str	r3, [r5, #20]
 8005496:	2300      	movs	r3, #0
 8005498:	9309      	str	r3, [sp, #36]	; 0x24
 800549a:	2320      	movs	r3, #32
 800549c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054a0:	2330      	movs	r3, #48	; 0x30
 80054a2:	f04f 0901 	mov.w	r9, #1
 80054a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80054aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005650 <_svfiprintf_r+0x1ec>
 80054ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b2:	4623      	mov	r3, r4
 80054b4:	469a      	mov	sl, r3
 80054b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ba:	b10a      	cbz	r2, 80054c0 <_svfiprintf_r+0x5c>
 80054bc:	2a25      	cmp	r2, #37	; 0x25
 80054be:	d1f9      	bne.n	80054b4 <_svfiprintf_r+0x50>
 80054c0:	ebba 0b04 	subs.w	fp, sl, r4
 80054c4:	d00b      	beq.n	80054de <_svfiprintf_r+0x7a>
 80054c6:	465b      	mov	r3, fp
 80054c8:	4622      	mov	r2, r4
 80054ca:	4629      	mov	r1, r5
 80054cc:	4638      	mov	r0, r7
 80054ce:	f7ff ff6d 	bl	80053ac <__ssputs_r>
 80054d2:	3001      	adds	r0, #1
 80054d4:	f000 80aa 	beq.w	800562c <_svfiprintf_r+0x1c8>
 80054d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054da:	445a      	add	r2, fp
 80054dc:	9209      	str	r2, [sp, #36]	; 0x24
 80054de:	f89a 3000 	ldrb.w	r3, [sl]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80a2 	beq.w	800562c <_svfiprintf_r+0x1c8>
 80054e8:	2300      	movs	r3, #0
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054f2:	f10a 0a01 	add.w	sl, sl, #1
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	9307      	str	r3, [sp, #28]
 80054fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005500:	4654      	mov	r4, sl
 8005502:	2205      	movs	r2, #5
 8005504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005508:	4851      	ldr	r0, [pc, #324]	; (8005650 <_svfiprintf_r+0x1ec>)
 800550a:	f000 fa43 	bl	8005994 <memchr>
 800550e:	9a04      	ldr	r2, [sp, #16]
 8005510:	b9d8      	cbnz	r0, 800554a <_svfiprintf_r+0xe6>
 8005512:	06d0      	lsls	r0, r2, #27
 8005514:	bf44      	itt	mi
 8005516:	2320      	movmi	r3, #32
 8005518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800551c:	0711      	lsls	r1, r2, #28
 800551e:	bf44      	itt	mi
 8005520:	232b      	movmi	r3, #43	; 0x2b
 8005522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005526:	f89a 3000 	ldrb.w	r3, [sl]
 800552a:	2b2a      	cmp	r3, #42	; 0x2a
 800552c:	d015      	beq.n	800555a <_svfiprintf_r+0xf6>
 800552e:	4654      	mov	r4, sl
 8005530:	2000      	movs	r0, #0
 8005532:	f04f 0c0a 	mov.w	ip, #10
 8005536:	9a07      	ldr	r2, [sp, #28]
 8005538:	4621      	mov	r1, r4
 800553a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800553e:	3b30      	subs	r3, #48	; 0x30
 8005540:	2b09      	cmp	r3, #9
 8005542:	d94e      	bls.n	80055e2 <_svfiprintf_r+0x17e>
 8005544:	b1b0      	cbz	r0, 8005574 <_svfiprintf_r+0x110>
 8005546:	9207      	str	r2, [sp, #28]
 8005548:	e014      	b.n	8005574 <_svfiprintf_r+0x110>
 800554a:	eba0 0308 	sub.w	r3, r0, r8
 800554e:	fa09 f303 	lsl.w	r3, r9, r3
 8005552:	4313      	orrs	r3, r2
 8005554:	46a2      	mov	sl, r4
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	e7d2      	b.n	8005500 <_svfiprintf_r+0x9c>
 800555a:	9b03      	ldr	r3, [sp, #12]
 800555c:	1d19      	adds	r1, r3, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	9103      	str	r1, [sp, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	bfbb      	ittet	lt
 8005566:	425b      	neglt	r3, r3
 8005568:	f042 0202 	orrlt.w	r2, r2, #2
 800556c:	9307      	strge	r3, [sp, #28]
 800556e:	9307      	strlt	r3, [sp, #28]
 8005570:	bfb8      	it	lt
 8005572:	9204      	strlt	r2, [sp, #16]
 8005574:	7823      	ldrb	r3, [r4, #0]
 8005576:	2b2e      	cmp	r3, #46	; 0x2e
 8005578:	d10c      	bne.n	8005594 <_svfiprintf_r+0x130>
 800557a:	7863      	ldrb	r3, [r4, #1]
 800557c:	2b2a      	cmp	r3, #42	; 0x2a
 800557e:	d135      	bne.n	80055ec <_svfiprintf_r+0x188>
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	3402      	adds	r4, #2
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	9203      	str	r2, [sp, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	bfb8      	it	lt
 800558e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005660 <_svfiprintf_r+0x1fc>
 8005598:	2203      	movs	r2, #3
 800559a:	4650      	mov	r0, sl
 800559c:	7821      	ldrb	r1, [r4, #0]
 800559e:	f000 f9f9 	bl	8005994 <memchr>
 80055a2:	b140      	cbz	r0, 80055b6 <_svfiprintf_r+0x152>
 80055a4:	2340      	movs	r3, #64	; 0x40
 80055a6:	eba0 000a 	sub.w	r0, r0, sl
 80055aa:	fa03 f000 	lsl.w	r0, r3, r0
 80055ae:	9b04      	ldr	r3, [sp, #16]
 80055b0:	3401      	adds	r4, #1
 80055b2:	4303      	orrs	r3, r0
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ba:	2206      	movs	r2, #6
 80055bc:	4825      	ldr	r0, [pc, #148]	; (8005654 <_svfiprintf_r+0x1f0>)
 80055be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055c2:	f000 f9e7 	bl	8005994 <memchr>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d038      	beq.n	800563c <_svfiprintf_r+0x1d8>
 80055ca:	4b23      	ldr	r3, [pc, #140]	; (8005658 <_svfiprintf_r+0x1f4>)
 80055cc:	bb1b      	cbnz	r3, 8005616 <_svfiprintf_r+0x1b2>
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	3307      	adds	r3, #7
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	3308      	adds	r3, #8
 80055d8:	9303      	str	r3, [sp, #12]
 80055da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055dc:	4433      	add	r3, r6
 80055de:	9309      	str	r3, [sp, #36]	; 0x24
 80055e0:	e767      	b.n	80054b2 <_svfiprintf_r+0x4e>
 80055e2:	460c      	mov	r4, r1
 80055e4:	2001      	movs	r0, #1
 80055e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ea:	e7a5      	b.n	8005538 <_svfiprintf_r+0xd4>
 80055ec:	2300      	movs	r3, #0
 80055ee:	f04f 0c0a 	mov.w	ip, #10
 80055f2:	4619      	mov	r1, r3
 80055f4:	3401      	adds	r4, #1
 80055f6:	9305      	str	r3, [sp, #20]
 80055f8:	4620      	mov	r0, r4
 80055fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055fe:	3a30      	subs	r2, #48	; 0x30
 8005600:	2a09      	cmp	r2, #9
 8005602:	d903      	bls.n	800560c <_svfiprintf_r+0x1a8>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0c5      	beq.n	8005594 <_svfiprintf_r+0x130>
 8005608:	9105      	str	r1, [sp, #20]
 800560a:	e7c3      	b.n	8005594 <_svfiprintf_r+0x130>
 800560c:	4604      	mov	r4, r0
 800560e:	2301      	movs	r3, #1
 8005610:	fb0c 2101 	mla	r1, ip, r1, r2
 8005614:	e7f0      	b.n	80055f8 <_svfiprintf_r+0x194>
 8005616:	ab03      	add	r3, sp, #12
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	462a      	mov	r2, r5
 800561c:	4638      	mov	r0, r7
 800561e:	4b0f      	ldr	r3, [pc, #60]	; (800565c <_svfiprintf_r+0x1f8>)
 8005620:	a904      	add	r1, sp, #16
 8005622:	f3af 8000 	nop.w
 8005626:	1c42      	adds	r2, r0, #1
 8005628:	4606      	mov	r6, r0
 800562a:	d1d6      	bne.n	80055da <_svfiprintf_r+0x176>
 800562c:	89ab      	ldrh	r3, [r5, #12]
 800562e:	065b      	lsls	r3, r3, #25
 8005630:	f53f af2c 	bmi.w	800548c <_svfiprintf_r+0x28>
 8005634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005636:	b01d      	add	sp, #116	; 0x74
 8005638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563c:	ab03      	add	r3, sp, #12
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	462a      	mov	r2, r5
 8005642:	4638      	mov	r0, r7
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <_svfiprintf_r+0x1f8>)
 8005646:	a904      	add	r1, sp, #16
 8005648:	f000 f87c 	bl	8005744 <_printf_i>
 800564c:	e7eb      	b.n	8005626 <_svfiprintf_r+0x1c2>
 800564e:	bf00      	nop
 8005650:	08005bce 	.word	0x08005bce
 8005654:	08005bd8 	.word	0x08005bd8
 8005658:	00000000 	.word	0x00000000
 800565c:	080053ad 	.word	0x080053ad
 8005660:	08005bd4 	.word	0x08005bd4

08005664 <_printf_common>:
 8005664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	4616      	mov	r6, r2
 800566a:	4699      	mov	r9, r3
 800566c:	688a      	ldr	r2, [r1, #8]
 800566e:	690b      	ldr	r3, [r1, #16]
 8005670:	4607      	mov	r7, r0
 8005672:	4293      	cmp	r3, r2
 8005674:	bfb8      	it	lt
 8005676:	4613      	movlt	r3, r2
 8005678:	6033      	str	r3, [r6, #0]
 800567a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800567e:	460c      	mov	r4, r1
 8005680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005684:	b10a      	cbz	r2, 800568a <_printf_common+0x26>
 8005686:	3301      	adds	r3, #1
 8005688:	6033      	str	r3, [r6, #0]
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	0699      	lsls	r1, r3, #26
 800568e:	bf42      	ittt	mi
 8005690:	6833      	ldrmi	r3, [r6, #0]
 8005692:	3302      	addmi	r3, #2
 8005694:	6033      	strmi	r3, [r6, #0]
 8005696:	6825      	ldr	r5, [r4, #0]
 8005698:	f015 0506 	ands.w	r5, r5, #6
 800569c:	d106      	bne.n	80056ac <_printf_common+0x48>
 800569e:	f104 0a19 	add.w	sl, r4, #25
 80056a2:	68e3      	ldr	r3, [r4, #12]
 80056a4:	6832      	ldr	r2, [r6, #0]
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	dc28      	bgt.n	80056fe <_printf_common+0x9a>
 80056ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056b0:	1e13      	subs	r3, r2, #0
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	bf18      	it	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	0692      	lsls	r2, r2, #26
 80056ba:	d42d      	bmi.n	8005718 <_printf_common+0xb4>
 80056bc:	4649      	mov	r1, r9
 80056be:	4638      	mov	r0, r7
 80056c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d020      	beq.n	800570c <_printf_common+0xa8>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	68e5      	ldr	r5, [r4, #12]
 80056ce:	f003 0306 	and.w	r3, r3, #6
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	bf18      	it	ne
 80056d6:	2500      	movne	r5, #0
 80056d8:	6832      	ldr	r2, [r6, #0]
 80056da:	f04f 0600 	mov.w	r6, #0
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	bf08      	it	eq
 80056e2:	1aad      	subeq	r5, r5, r2
 80056e4:	6922      	ldr	r2, [r4, #16]
 80056e6:	bf08      	it	eq
 80056e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056ec:	4293      	cmp	r3, r2
 80056ee:	bfc4      	itt	gt
 80056f0:	1a9b      	subgt	r3, r3, r2
 80056f2:	18ed      	addgt	r5, r5, r3
 80056f4:	341a      	adds	r4, #26
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	d11a      	bne.n	8005730 <_printf_common+0xcc>
 80056fa:	2000      	movs	r0, #0
 80056fc:	e008      	b.n	8005710 <_printf_common+0xac>
 80056fe:	2301      	movs	r3, #1
 8005700:	4652      	mov	r2, sl
 8005702:	4649      	mov	r1, r9
 8005704:	4638      	mov	r0, r7
 8005706:	47c0      	blx	r8
 8005708:	3001      	adds	r0, #1
 800570a:	d103      	bne.n	8005714 <_printf_common+0xb0>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005714:	3501      	adds	r5, #1
 8005716:	e7c4      	b.n	80056a2 <_printf_common+0x3e>
 8005718:	2030      	movs	r0, #48	; 0x30
 800571a:	18e1      	adds	r1, r4, r3
 800571c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005726:	4422      	add	r2, r4
 8005728:	3302      	adds	r3, #2
 800572a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800572e:	e7c5      	b.n	80056bc <_printf_common+0x58>
 8005730:	2301      	movs	r3, #1
 8005732:	4622      	mov	r2, r4
 8005734:	4649      	mov	r1, r9
 8005736:	4638      	mov	r0, r7
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d0e6      	beq.n	800570c <_printf_common+0xa8>
 800573e:	3601      	adds	r6, #1
 8005740:	e7d9      	b.n	80056f6 <_printf_common+0x92>
	...

08005744 <_printf_i>:
 8005744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	460c      	mov	r4, r1
 800574a:	7e27      	ldrb	r7, [r4, #24]
 800574c:	4691      	mov	r9, r2
 800574e:	2f78      	cmp	r7, #120	; 0x78
 8005750:	4680      	mov	r8, r0
 8005752:	469a      	mov	sl, r3
 8005754:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800575a:	d807      	bhi.n	800576c <_printf_i+0x28>
 800575c:	2f62      	cmp	r7, #98	; 0x62
 800575e:	d80a      	bhi.n	8005776 <_printf_i+0x32>
 8005760:	2f00      	cmp	r7, #0
 8005762:	f000 80d9 	beq.w	8005918 <_printf_i+0x1d4>
 8005766:	2f58      	cmp	r7, #88	; 0x58
 8005768:	f000 80a4 	beq.w	80058b4 <_printf_i+0x170>
 800576c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005774:	e03a      	b.n	80057ec <_printf_i+0xa8>
 8005776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800577a:	2b15      	cmp	r3, #21
 800577c:	d8f6      	bhi.n	800576c <_printf_i+0x28>
 800577e:	a001      	add	r0, pc, #4	; (adr r0, 8005784 <_printf_i+0x40>)
 8005780:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005784:	080057dd 	.word	0x080057dd
 8005788:	080057f1 	.word	0x080057f1
 800578c:	0800576d 	.word	0x0800576d
 8005790:	0800576d 	.word	0x0800576d
 8005794:	0800576d 	.word	0x0800576d
 8005798:	0800576d 	.word	0x0800576d
 800579c:	080057f1 	.word	0x080057f1
 80057a0:	0800576d 	.word	0x0800576d
 80057a4:	0800576d 	.word	0x0800576d
 80057a8:	0800576d 	.word	0x0800576d
 80057ac:	0800576d 	.word	0x0800576d
 80057b0:	080058ff 	.word	0x080058ff
 80057b4:	08005821 	.word	0x08005821
 80057b8:	080058e1 	.word	0x080058e1
 80057bc:	0800576d 	.word	0x0800576d
 80057c0:	0800576d 	.word	0x0800576d
 80057c4:	08005921 	.word	0x08005921
 80057c8:	0800576d 	.word	0x0800576d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800576d 	.word	0x0800576d
 80057d4:	0800576d 	.word	0x0800576d
 80057d8:	080058e9 	.word	0x080058e9
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	600a      	str	r2, [r1, #0]
 80057e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0a4      	b.n	800593a <_printf_i+0x1f6>
 80057f0:	6825      	ldr	r5, [r4, #0]
 80057f2:	6808      	ldr	r0, [r1, #0]
 80057f4:	062e      	lsls	r6, r5, #24
 80057f6:	f100 0304 	add.w	r3, r0, #4
 80057fa:	d50a      	bpl.n	8005812 <_printf_i+0xce>
 80057fc:	6805      	ldr	r5, [r0, #0]
 80057fe:	600b      	str	r3, [r1, #0]
 8005800:	2d00      	cmp	r5, #0
 8005802:	da03      	bge.n	800580c <_printf_i+0xc8>
 8005804:	232d      	movs	r3, #45	; 0x2d
 8005806:	426d      	negs	r5, r5
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580c:	230a      	movs	r3, #10
 800580e:	485e      	ldr	r0, [pc, #376]	; (8005988 <_printf_i+0x244>)
 8005810:	e019      	b.n	8005846 <_printf_i+0x102>
 8005812:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005816:	6805      	ldr	r5, [r0, #0]
 8005818:	600b      	str	r3, [r1, #0]
 800581a:	bf18      	it	ne
 800581c:	b22d      	sxthne	r5, r5
 800581e:	e7ef      	b.n	8005800 <_printf_i+0xbc>
 8005820:	680b      	ldr	r3, [r1, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	1d18      	adds	r0, r3, #4
 8005826:	6008      	str	r0, [r1, #0]
 8005828:	0628      	lsls	r0, r5, #24
 800582a:	d501      	bpl.n	8005830 <_printf_i+0xec>
 800582c:	681d      	ldr	r5, [r3, #0]
 800582e:	e002      	b.n	8005836 <_printf_i+0xf2>
 8005830:	0669      	lsls	r1, r5, #25
 8005832:	d5fb      	bpl.n	800582c <_printf_i+0xe8>
 8005834:	881d      	ldrh	r5, [r3, #0]
 8005836:	2f6f      	cmp	r7, #111	; 0x6f
 8005838:	bf0c      	ite	eq
 800583a:	2308      	moveq	r3, #8
 800583c:	230a      	movne	r3, #10
 800583e:	4852      	ldr	r0, [pc, #328]	; (8005988 <_printf_i+0x244>)
 8005840:	2100      	movs	r1, #0
 8005842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005846:	6866      	ldr	r6, [r4, #4]
 8005848:	2e00      	cmp	r6, #0
 800584a:	bfa8      	it	ge
 800584c:	6821      	ldrge	r1, [r4, #0]
 800584e:	60a6      	str	r6, [r4, #8]
 8005850:	bfa4      	itt	ge
 8005852:	f021 0104 	bicge.w	r1, r1, #4
 8005856:	6021      	strge	r1, [r4, #0]
 8005858:	b90d      	cbnz	r5, 800585e <_printf_i+0x11a>
 800585a:	2e00      	cmp	r6, #0
 800585c:	d04d      	beq.n	80058fa <_printf_i+0x1b6>
 800585e:	4616      	mov	r6, r2
 8005860:	fbb5 f1f3 	udiv	r1, r5, r3
 8005864:	fb03 5711 	mls	r7, r3, r1, r5
 8005868:	5dc7      	ldrb	r7, [r0, r7]
 800586a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800586e:	462f      	mov	r7, r5
 8005870:	42bb      	cmp	r3, r7
 8005872:	460d      	mov	r5, r1
 8005874:	d9f4      	bls.n	8005860 <_printf_i+0x11c>
 8005876:	2b08      	cmp	r3, #8
 8005878:	d10b      	bne.n	8005892 <_printf_i+0x14e>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	07df      	lsls	r7, r3, #31
 800587e:	d508      	bpl.n	8005892 <_printf_i+0x14e>
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	6861      	ldr	r1, [r4, #4]
 8005884:	4299      	cmp	r1, r3
 8005886:	bfde      	ittt	le
 8005888:	2330      	movle	r3, #48	; 0x30
 800588a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800588e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005892:	1b92      	subs	r2, r2, r6
 8005894:	6122      	str	r2, [r4, #16]
 8005896:	464b      	mov	r3, r9
 8005898:	4621      	mov	r1, r4
 800589a:	4640      	mov	r0, r8
 800589c:	f8cd a000 	str.w	sl, [sp]
 80058a0:	aa03      	add	r2, sp, #12
 80058a2:	f7ff fedf 	bl	8005664 <_printf_common>
 80058a6:	3001      	adds	r0, #1
 80058a8:	d14c      	bne.n	8005944 <_printf_i+0x200>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b004      	add	sp, #16
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	4834      	ldr	r0, [pc, #208]	; (8005988 <_printf_i+0x244>)
 80058b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058ba:	680e      	ldr	r6, [r1, #0]
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	f856 5b04 	ldr.w	r5, [r6], #4
 80058c2:	061f      	lsls	r7, r3, #24
 80058c4:	600e      	str	r6, [r1, #0]
 80058c6:	d514      	bpl.n	80058f2 <_printf_i+0x1ae>
 80058c8:	07d9      	lsls	r1, r3, #31
 80058ca:	bf44      	itt	mi
 80058cc:	f043 0320 	orrmi.w	r3, r3, #32
 80058d0:	6023      	strmi	r3, [r4, #0]
 80058d2:	b91d      	cbnz	r5, 80058dc <_printf_i+0x198>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	2310      	movs	r3, #16
 80058de:	e7af      	b.n	8005840 <_printf_i+0xfc>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	f043 0320 	orr.w	r3, r3, #32
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	2378      	movs	r3, #120	; 0x78
 80058ea:	4828      	ldr	r0, [pc, #160]	; (800598c <_printf_i+0x248>)
 80058ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058f0:	e7e3      	b.n	80058ba <_printf_i+0x176>
 80058f2:	065e      	lsls	r6, r3, #25
 80058f4:	bf48      	it	mi
 80058f6:	b2ad      	uxthmi	r5, r5
 80058f8:	e7e6      	b.n	80058c8 <_printf_i+0x184>
 80058fa:	4616      	mov	r6, r2
 80058fc:	e7bb      	b.n	8005876 <_printf_i+0x132>
 80058fe:	680b      	ldr	r3, [r1, #0]
 8005900:	6826      	ldr	r6, [r4, #0]
 8005902:	1d1d      	adds	r5, r3, #4
 8005904:	6960      	ldr	r0, [r4, #20]
 8005906:	600d      	str	r5, [r1, #0]
 8005908:	0635      	lsls	r5, r6, #24
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	d501      	bpl.n	8005912 <_printf_i+0x1ce>
 800590e:	6018      	str	r0, [r3, #0]
 8005910:	e002      	b.n	8005918 <_printf_i+0x1d4>
 8005912:	0671      	lsls	r1, r6, #25
 8005914:	d5fb      	bpl.n	800590e <_printf_i+0x1ca>
 8005916:	8018      	strh	r0, [r3, #0]
 8005918:	2300      	movs	r3, #0
 800591a:	4616      	mov	r6, r2
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	e7ba      	b.n	8005896 <_printf_i+0x152>
 8005920:	680b      	ldr	r3, [r1, #0]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	600a      	str	r2, [r1, #0]
 8005926:	681e      	ldr	r6, [r3, #0]
 8005928:	2100      	movs	r1, #0
 800592a:	4630      	mov	r0, r6
 800592c:	6862      	ldr	r2, [r4, #4]
 800592e:	f000 f831 	bl	8005994 <memchr>
 8005932:	b108      	cbz	r0, 8005938 <_printf_i+0x1f4>
 8005934:	1b80      	subs	r0, r0, r6
 8005936:	6060      	str	r0, [r4, #4]
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	2300      	movs	r3, #0
 800593e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005942:	e7a8      	b.n	8005896 <_printf_i+0x152>
 8005944:	4632      	mov	r2, r6
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	47d0      	blx	sl
 800594e:	3001      	adds	r0, #1
 8005950:	d0ab      	beq.n	80058aa <_printf_i+0x166>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	079b      	lsls	r3, r3, #30
 8005956:	d413      	bmi.n	8005980 <_printf_i+0x23c>
 8005958:	68e0      	ldr	r0, [r4, #12]
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	4298      	cmp	r0, r3
 800595e:	bfb8      	it	lt
 8005960:	4618      	movlt	r0, r3
 8005962:	e7a4      	b.n	80058ae <_printf_i+0x16a>
 8005964:	2301      	movs	r3, #1
 8005966:	4632      	mov	r2, r6
 8005968:	4649      	mov	r1, r9
 800596a:	4640      	mov	r0, r8
 800596c:	47d0      	blx	sl
 800596e:	3001      	adds	r0, #1
 8005970:	d09b      	beq.n	80058aa <_printf_i+0x166>
 8005972:	3501      	adds	r5, #1
 8005974:	68e3      	ldr	r3, [r4, #12]
 8005976:	9903      	ldr	r1, [sp, #12]
 8005978:	1a5b      	subs	r3, r3, r1
 800597a:	42ab      	cmp	r3, r5
 800597c:	dcf2      	bgt.n	8005964 <_printf_i+0x220>
 800597e:	e7eb      	b.n	8005958 <_printf_i+0x214>
 8005980:	2500      	movs	r5, #0
 8005982:	f104 0619 	add.w	r6, r4, #25
 8005986:	e7f5      	b.n	8005974 <_printf_i+0x230>
 8005988:	08005bdf 	.word	0x08005bdf
 800598c:	08005bf0 	.word	0x08005bf0

08005990 <__retarget_lock_acquire_recursive>:
 8005990:	4770      	bx	lr

08005992 <__retarget_lock_release_recursive>:
 8005992:	4770      	bx	lr

08005994 <memchr>:
 8005994:	4603      	mov	r3, r0
 8005996:	b510      	push	{r4, lr}
 8005998:	b2c9      	uxtb	r1, r1
 800599a:	4402      	add	r2, r0
 800599c:	4293      	cmp	r3, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	d101      	bne.n	80059a6 <memchr+0x12>
 80059a2:	2000      	movs	r0, #0
 80059a4:	e003      	b.n	80059ae <memchr+0x1a>
 80059a6:	7804      	ldrb	r4, [r0, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	428c      	cmp	r4, r1
 80059ac:	d1f6      	bne.n	800599c <memchr+0x8>
 80059ae:	bd10      	pop	{r4, pc}

080059b0 <memcpy>:
 80059b0:	440a      	add	r2, r1
 80059b2:	4291      	cmp	r1, r2
 80059b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059b8:	d100      	bne.n	80059bc <memcpy+0xc>
 80059ba:	4770      	bx	lr
 80059bc:	b510      	push	{r4, lr}
 80059be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059c2:	4291      	cmp	r1, r2
 80059c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059c8:	d1f9      	bne.n	80059be <memcpy+0xe>
 80059ca:	bd10      	pop	{r4, pc}

080059cc <memmove>:
 80059cc:	4288      	cmp	r0, r1
 80059ce:	b510      	push	{r4, lr}
 80059d0:	eb01 0402 	add.w	r4, r1, r2
 80059d4:	d902      	bls.n	80059dc <memmove+0x10>
 80059d6:	4284      	cmp	r4, r0
 80059d8:	4623      	mov	r3, r4
 80059da:	d807      	bhi.n	80059ec <memmove+0x20>
 80059dc:	1e43      	subs	r3, r0, #1
 80059de:	42a1      	cmp	r1, r4
 80059e0:	d008      	beq.n	80059f4 <memmove+0x28>
 80059e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ea:	e7f8      	b.n	80059de <memmove+0x12>
 80059ec:	4601      	mov	r1, r0
 80059ee:	4402      	add	r2, r0
 80059f0:	428a      	cmp	r2, r1
 80059f2:	d100      	bne.n	80059f6 <memmove+0x2a>
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059fe:	e7f7      	b.n	80059f0 <memmove+0x24>

08005a00 <_realloc_r>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	4607      	mov	r7, r0
 8005a04:	4614      	mov	r4, r2
 8005a06:	460e      	mov	r6, r1
 8005a08:	b921      	cbnz	r1, 8005a14 <_realloc_r+0x14>
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a10:	f7ff bc36 	b.w	8005280 <_malloc_r>
 8005a14:	b922      	cbnz	r2, 8005a20 <_realloc_r+0x20>
 8005a16:	f7ff fbe7 	bl	80051e8 <_free_r>
 8005a1a:	4625      	mov	r5, r4
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a20:	f000 f814 	bl	8005a4c <_malloc_usable_size_r>
 8005a24:	42a0      	cmp	r0, r4
 8005a26:	d20f      	bcs.n	8005a48 <_realloc_r+0x48>
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f7ff fc28 	bl	8005280 <_malloc_r>
 8005a30:	4605      	mov	r5, r0
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d0f2      	beq.n	8005a1c <_realloc_r+0x1c>
 8005a36:	4631      	mov	r1, r6
 8005a38:	4622      	mov	r2, r4
 8005a3a:	f7ff ffb9 	bl	80059b0 <memcpy>
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4638      	mov	r0, r7
 8005a42:	f7ff fbd1 	bl	80051e8 <_free_r>
 8005a46:	e7e9      	b.n	8005a1c <_realloc_r+0x1c>
 8005a48:	4635      	mov	r5, r6
 8005a4a:	e7e7      	b.n	8005a1c <_realloc_r+0x1c>

08005a4c <_malloc_usable_size_r>:
 8005a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a50:	1f18      	subs	r0, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bfbc      	itt	lt
 8005a56:	580b      	ldrlt	r3, [r1, r0]
 8005a58:	18c0      	addlt	r0, r0, r3
 8005a5a:	4770      	bx	lr

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
